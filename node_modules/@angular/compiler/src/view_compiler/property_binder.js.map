{"version":3,"file":"property_binder.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/property_binder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '@angular/core';\n\nimport {createCheckBindingField, createCheckBindingStmt} from '../compiler_util/binding_util';\nimport {ConvertPropertyBindingResult, convertPropertyBinding} from '../compiler_util/expression_converter';\nimport {createEnumExpression} from '../compiler_util/identifier_util';\nimport {writeToRenderer} from '../compiler_util/render_util';\nimport * as cdAst from '../expression_parser/ast';\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {EMPTY_STATE as EMPTY_ANIMATION_STATE, LifecycleHooks, isDefaultChangeDetectionStrategy} from '../private_import_core';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {BoundElementPropertyAst, BoundTextAst, DirectiveAst, PropertyBindingType} from '../template_parser/template_ast';\nimport {camelCaseToDashCase} from '../util';\n\nimport {CompileElement, CompileNode} from './compile_element';\nimport {CompileMethod} from './compile_method';\nimport {CompileView} from './compile_view';\nimport {DetectChangesVars, ViewProperties} from './constants';\nimport {CompileEventListener} from './event_binder';\n\nexport function bindRenderText(\n    boundText: BoundTextAst, compileNode: CompileNode, view: CompileView): void {\n  const valueField = createCheckBindingField(view);\n  const evalResult = convertPropertyBinding(\n      view, view, view.componentContext, boundText.value, valueField.bindingId);\n  if (!evalResult) {\n    return null;\n  }\n\n  view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);\n  view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(\n      evalResult, valueField.expression, DetectChangesVars.throwOnChange,\n      [o.THIS_EXPR.prop('renderer')\n           .callMethod('setText', [compileNode.renderNode, evalResult.currValExpr])\n           .toStmt()]));\n}\n\nfunction bindAndWriteToRenderer(\n    boundProps: BoundElementPropertyAst[], context: o.Expression, compileElement: CompileElement,\n    isHostProp: boolean, eventListeners: CompileEventListener[]) {\n  var view = compileElement.view;\n  var renderNode = compileElement.renderNode;\n  boundProps.forEach((boundProp) => {\n    const bindingField = createCheckBindingField(view);\n    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);\n    const evalResult = convertPropertyBinding(\n        view, isHostProp ? null : view, context, boundProp.value, bindingField.bindingId);\n    var updateStmts: o.Statement[] = [];\n    var compileMethod = view.detectChangesRenderPropertiesMethod;\n    switch (boundProp.type) {\n      case PropertyBindingType.Property:\n      case PropertyBindingType.Attribute:\n      case PropertyBindingType.Class:\n      case PropertyBindingType.Style:\n        updateStmts.push(...writeToRenderer(\n            o.THIS_EXPR, boundProp, renderNode, evalResult.currValExpr,\n            view.genConfig.logBindingUpdate));\n        break;\n      case PropertyBindingType.Animation:\n        compileMethod = view.animationBindingsMethod;\n        const detachStmts: o.Statement[] = [];\n\n        const animationName = boundProp.name;\n        const targetViewExpr: o.Expression =\n            isHostProp ? compileElement.appElement.prop('componentView') : o.THIS_EXPR;\n\n        const animationFnExpr =\n            targetViewExpr.prop('componentType').prop('animations').key(o.literal(animationName));\n\n        // it's important to normalize the void value as `void` explicitly\n        // so that the styles data can be obtained from the stringmap\n        const emptyStateValue = o.literal(EMPTY_ANIMATION_STATE);\n        const unitializedValue = o.importExpr(resolveIdentifier(Identifiers.UNINITIALIZED));\n        const animationTransitionVar = o.variable('animationTransition_' + animationName);\n\n        updateStmts.push(animationTransitionVar\n                             .set(animationFnExpr.callFn([\n                               o.THIS_EXPR, renderNode,\n                               bindingField.expression.equals(unitializedValue)\n                                   .conditional(emptyStateValue, bindingField.expression),\n                               evalResult.currValExpr.equals(unitializedValue)\n                                   .conditional(emptyStateValue, evalResult.currValExpr)\n                             ]))\n                             .toDeclStmt());\n\n        detachStmts.push(\n            animationTransitionVar\n                .set(animationFnExpr.callFn(\n                    [o.THIS_EXPR, renderNode, bindingField.expression, emptyStateValue]))\n                .toDeclStmt());\n\n        eventListeners.forEach(listener => {\n          if (listener.isAnimation && listener.eventName === animationName) {\n            let animationStmt = listener.listenToAnimation(animationTransitionVar);\n            updateStmts.push(animationStmt);\n            detachStmts.push(animationStmt);\n          }\n        });\n\n        view.detachMethod.addStmts(detachStmts);\n\n        break;\n    }\n    compileMethod.addStmts(createCheckBindingStmt(\n        evalResult, bindingField.expression, DetectChangesVars.throwOnChange, updateStmts));\n  });\n}\n\nexport function bindRenderInputs(\n    boundProps: BoundElementPropertyAst[], compileElement: CompileElement,\n    eventListeners: CompileEventListener[]): void {\n  bindAndWriteToRenderer(\n      boundProps, compileElement.view.componentContext, compileElement, false, eventListeners);\n}\n\nexport function bindDirectiveHostProps(\n    directiveAst: DirectiveAst, directiveWrapperInstance: o.Expression,\n    compileElement: CompileElement, eventListeners: CompileEventListener[], elementName: string,\n    schemaRegistry: ElementSchemaRegistry): void {\n  // host properties are change detected by the DirectiveWrappers,\n  // except for the animation properties as they need close integration with animation events\n  // and DirectiveWrappers don't support\n  // event listeners right now.\n  bindAndWriteToRenderer(\n      directiveAst.hostProperties.filter(boundProp => boundProp.isAnimation),\n      directiveWrapperInstance.prop('context'), compileElement, true, eventListeners);\n\n\n  const methodArgs: o.Expression[] =\n      [o.THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange];\n  // We need to provide the SecurityContext for properties that could need sanitization.\n  directiveAst.hostProperties.filter(boundProp => boundProp.needsRuntimeSecurityContext)\n      .forEach((boundProp) => {\n        let ctx: SecurityContext;\n        switch (boundProp.type) {\n          case PropertyBindingType.Property:\n            ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);\n            break;\n          case PropertyBindingType.Attribute:\n            ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);\n            break;\n          default:\n            throw new Error(\n                `Illegal state: Only property / attribute bindings can have an unknown security context! Binding ${boundProp.name}`);\n        }\n        methodArgs.push(createEnumExpression(Identifiers.SecurityContext, ctx));\n      });\n  compileElement.view.detectChangesRenderPropertiesMethod.addStmt(\n      directiveWrapperInstance.callMethod('detectChangesInHostProps', methodArgs).toStmt());\n}\n\nexport function bindDirectiveInputs(\n    directiveAst: DirectiveAst, directiveWrapperInstance: o.Expression, dirIndex: number,\n    compileElement: CompileElement) {\n  var view = compileElement.view;\n  var detectChangesInInputsMethod = view.detectChangesInInputsMethod;\n  detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n\n  directiveAst.inputs.forEach((input, inputIdx) => {\n    // Note: We can't use `fields.length` here, as we are not adding a field!\n    const bindingId = `${compileElement.nodeIndex}_${dirIndex}_${inputIdx}`;\n    detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);\n    const evalResult =\n        convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);\n    if (!evalResult) {\n      return;\n    }\n    detectChangesInInputsMethod.addStmts(evalResult.stmts);\n    detectChangesInInputsMethod.addStmt(\n        directiveWrapperInstance\n            .callMethod(\n                `check_${input.directiveName}`,\n                [\n                  evalResult.currValExpr, DetectChangesVars.throwOnChange,\n                  evalResult.forceUpdate || o.literal(false)\n                ])\n            .toStmt());\n  });\n  var isOnPushComp = directiveAst.directive.isComponent &&\n      !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);\n  let directiveDetectChangesExpr = directiveWrapperInstance.callMethod(\n      'detectChangesInInputProps',\n      [o.THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange]);\n  const directiveDetectChangesStmt = isOnPushComp ?\n      new o.IfStmt(directiveDetectChangesExpr, [compileElement.appElement.prop('componentView')\n                                                    .callMethod('markAsCheckOnce', [])\n                                                    .toStmt()]) :\n      directiveDetectChangesExpr.toStmt();\n  detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}