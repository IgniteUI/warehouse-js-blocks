{"version":3,"file":"offline_compiler.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/offline_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SchemaMetadata} from '@angular/core';\n\nimport {AnimationCompiler} from './animation/animation_compiler';\nimport {AnimationParser} from './animation/animation_parser';\nimport {CompileDirectiveMetadata, CompileIdentifierMetadata, CompileNgModuleMetadata, CompilePipeMetadata, CompileProviderMetadata, StaticSymbol, createHostComponentMeta} from './compile_metadata';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {DirectiveWrapperCompileResult, DirectiveWrapperCompiler} from './directive_wrapper_compiler';\nimport {ListWrapper, MapWrapper} from './facade/collection';\nimport {Identifiers, resolveIdentifier, resolveIdentifierToken} from './identifiers';\nimport {CompileMetadataResolver} from './metadata_resolver';\nimport {NgModuleCompiler} from './ng_module_compiler';\nimport {OutputEmitter} from './output/abstract_emitter';\nimport * as o from './output/output_ast';\nimport {CompiledStylesheet, StyleCompiler} from './style_compiler';\nimport {TemplateParser} from './template_parser/template_parser';\nimport {ComponentFactoryDependency, DirectiveWrapperDependency, ViewCompileResult, ViewCompiler, ViewFactoryDependency} from './view_compiler/view_compiler';\n\nexport class SourceModule {\n  constructor(public fileUrl: string, public moduleUrl: string, public source: string) {}\n}\n\n// Returns all the source files and a mapping from modules to directives\nexport function analyzeNgModules(\n    programStaticSymbols: StaticSymbol[], options: {transitiveModules: boolean},\n    metadataResolver: CompileMetadataResolver): {\n  ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>,\n  files: Array<{srcUrl: string, directives: StaticSymbol[], ngModules: StaticSymbol[]}>\n} {\n  const {\n    ngModules: programNgModules,\n    pipesAndDirectives: programPipesOrDirectives,\n  } = _extractModulesAndPipesOrDirectives(programStaticSymbols, metadataResolver);\n\n  const moduleMetasByRef = new Map<any, CompileNgModuleMetadata>();\n\n  programNgModules.forEach(modMeta => {\n    if (options.transitiveModules) {\n      // For every input modules add the list of transitively included modules\n      modMeta.transitiveModule.modules.forEach(\n          modMeta => { moduleMetasByRef.set(modMeta.type.reference, modMeta); });\n    } else {\n      moduleMetasByRef.set(modMeta.type.reference, modMeta);\n    }\n  });\n\n  const ngModuleMetas = MapWrapper.values(moduleMetasByRef);\n  const ngModuleByPipeOrDirective = new Map<StaticSymbol, CompileNgModuleMetadata>();\n  const ngModulesByFile = new Map<string, StaticSymbol[]>();\n  const ngDirectivesByFile = new Map<string, StaticSymbol[]>();\n  const filePaths = new Set<string>();\n\n  // Looping over all modules to construct:\n  // - a map from file to modules `ngModulesByFile`,\n  // - a map from file to directives `ngDirectivesByFile`,\n  // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.\n  ngModuleMetas.forEach((ngModuleMeta) => {\n    const srcFileUrl = ngModuleMeta.type.reference.filePath;\n    filePaths.add(srcFileUrl);\n    ngModulesByFile.set(\n        srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));\n\n    ngModuleMeta.declaredDirectives.forEach((dirMeta: CompileDirectiveMetadata) => {\n      const fileUrl = dirMeta.type.reference.filePath;\n      filePaths.add(fileUrl);\n      ngDirectivesByFile.set(\n          fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirMeta.type.reference));\n      ngModuleByPipeOrDirective.set(dirMeta.type.reference, ngModuleMeta);\n    });\n\n    ngModuleMeta.declaredPipes.forEach((pipeMeta: CompilePipeMetadata) => {\n      const fileUrl = pipeMeta.type.reference.filePath;\n      filePaths.add(fileUrl);\n      ngModuleByPipeOrDirective.set(pipeMeta.type.reference, ngModuleMeta);\n    });\n  });\n\n  // Throw an error if any of the program pipe or directives is not declared by a module\n  const symbolsMissingModule =\n      programPipesOrDirectives.filter(s => !ngModuleByPipeOrDirective.has(s));\n\n  if (symbolsMissingModule.length) {\n    const messages = symbolsMissingModule.map(\n        s => `Cannot determine the module for class ${s.name} in ${s.filePath}!`);\n    throw new Error(messages.join('\\n'));\n  }\n\n  const files: {srcUrl: string, directives: StaticSymbol[], ngModules: StaticSymbol[]}[] = [];\n\n  filePaths.forEach((srcUrl) => {\n    const directives = ngDirectivesByFile.get(srcUrl) || [];\n    const ngModules = ngModulesByFile.get(srcUrl) || [];\n    files.push({srcUrl, directives, ngModules});\n  });\n\n  return {\n      // map directive/pipe to module\n      ngModuleByPipeOrDirective,\n      // list modules and directives for every source file\n      files,\n  };\n}\n\nexport class OfflineCompiler {\n  private _animationParser = new AnimationParser();\n  private _animationCompiler = new AnimationCompiler();\n\n  constructor(\n      private _metadataResolver: CompileMetadataResolver,\n      private _directiveNormalizer: DirectiveNormalizer, private _templateParser: TemplateParser,\n      private _styleCompiler: StyleCompiler, private _viewCompiler: ViewCompiler,\n      private _dirWrapperCompiler: DirectiveWrapperCompiler,\n      private _ngModuleCompiler: NgModuleCompiler, private _outputEmitter: OutputEmitter,\n      private _localeId: string, private _translationFormat: string) {}\n\n  clearCache() {\n    this._directiveNormalizer.clearCache();\n    this._metadataResolver.clearCache();\n  }\n\n  compileModules(staticSymbols: StaticSymbol[], options: {transitiveModules: boolean}):\n      Promise<SourceModule[]> {\n    const {ngModuleByPipeOrDirective, files} =\n        analyzeNgModules(staticSymbols, options, this._metadataResolver);\n\n    const sourceModules = files.map(\n        file => this._compileSrcFile(\n            file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.ngModules));\n\n    return Promise.all(sourceModules)\n        .then((modules: SourceModule[][]) => ListWrapper.flatten(modules));\n  }\n\n  private _compileSrcFile(\n      srcFileUrl: string, ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>,\n      directives: StaticSymbol[], ngModules: StaticSymbol[]): Promise<SourceModule[]> {\n    const fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];\n    const statements: o.Statement[] = [];\n    const exportedVars: string[] = [];\n    const outputSourceModules: SourceModule[] = [];\n\n    // compile all ng modules\n    exportedVars.push(\n        ...ngModules.map((ngModuleType) => this._compileModule(ngModuleType, statements)));\n\n    // compile directive wrappers\n    exportedVars.push(...directives.map(\n        (directiveType) => this._compileDirectiveWrapper(directiveType, statements)));\n\n    // compile components\n    return Promise\n        .all(directives.map((dirType) => {\n          const compMeta = this._metadataResolver.getDirectiveMetadata(<any>dirType);\n          if (!compMeta.isComponent) {\n            return Promise.resolve(null);\n          }\n          const ngModule = ngModuleByPipeOrDirective.get(dirType);\n          if (!ngModule) {\n            throw new Error(\n                `Internal Error: cannot determine the module for component ${compMeta.type.name}!`);\n          }\n\n          return Promise\n              .all([compMeta, ...ngModule.transitiveModule.directives].map(\n                  dirMeta => this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult))\n              .then((normalizedCompWithDirectives) => {\n                const [compMeta, ...dirMetas] = normalizedCompWithDirectives;\n                _assertComponent(compMeta);\n\n                // compile styles\n                const stylesCompileResults = this._styleCompiler.compileComponent(compMeta);\n                stylesCompileResults.externalStylesheets.forEach((compiledStyleSheet) => {\n                  outputSourceModules.push(\n                      this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));\n                });\n\n                // compile components\n                exportedVars.push(\n                    this._compileComponentFactory(compMeta, fileSuffix, statements),\n                    this._compileComponent(\n                        compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas,\n                        stylesCompileResults.componentStylesheet, fileSuffix, statements));\n              });\n        }))\n        .then(() => {\n          if (statements.length > 0) {\n            const srcModule = this._codegenSourceModule(\n                srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);\n            outputSourceModules.unshift(srcModule);\n          }\n          return outputSourceModules;\n        });\n  }\n\n  private _compileModule(ngModuleType: StaticSymbol, targetStatements: o.Statement[]): string {\n    const ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);\n    const providers: CompileProviderMetadata[] = [];\n\n    if (this._localeId) {\n      providers.push(new CompileProviderMetadata({\n        token: resolveIdentifierToken(Identifiers.LOCALE_ID),\n        useValue: this._localeId,\n      }));\n    }\n\n    if (this._translationFormat) {\n      providers.push(new CompileProviderMetadata({\n        token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),\n        useValue: this._translationFormat\n      }));\n    }\n\n    const appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);\n\n    appCompileResult.dependencies.forEach((dep) => {\n      dep.placeholder.name = _componentFactoryName(dep.comp);\n      dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);\n    });\n\n    targetStatements.push(...appCompileResult.statements);\n    return appCompileResult.ngModuleFactoryVar;\n  }\n\n  private _compileDirectiveWrapper(directiveType: StaticSymbol, targetStatements: o.Statement[]):\n      string {\n    const dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);\n    const dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);\n\n    targetStatements.push(...dirCompileResult.statements);\n    return dirCompileResult.dirWrapperClassVar;\n  }\n\n  private _compileComponentFactory(\n      compMeta: CompileDirectiveMetadata, fileSuffix: string,\n      targetStatements: o.Statement[]): string {\n    const hostMeta = createHostComponentMeta(compMeta);\n    const hostViewFactoryVar =\n        this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements);\n    const compFactoryVar = _componentFactoryName(compMeta.type);\n    targetStatements.push(\n        o.variable(compFactoryVar)\n            .set(o.importExpr(resolveIdentifier(Identifiers.ComponentFactory), [o.importType(\n                                                                                   compMeta.type)])\n                     .instantiate(\n                         [\n                           o.literal(compMeta.selector),\n                           o.variable(hostViewFactoryVar),\n                           o.importExpr(compMeta.type),\n                         ],\n                         o.importType(\n                             resolveIdentifier(Identifiers.ComponentFactory),\n                             [o.importType(compMeta.type)], [o.TypeModifier.Const])))\n            .toDeclStmt(null, [o.StmtModifier.Final]));\n    return compFactoryVar;\n  }\n\n  private _compileComponent(\n      compMeta: CompileDirectiveMetadata, directives: CompileDirectiveMetadata[],\n      pipes: CompilePipeMetadata[], schemas: SchemaMetadata[], componentStyles: CompiledStylesheet,\n      fileSuffix: string, targetStatements: o.Statement[]): string {\n    const parsedAnimations = this._animationParser.parseComponent(compMeta);\n    const parsedTemplate = this._templateParser.parse(\n        compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name);\n    const stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);\n    const compiledAnimations =\n        this._animationCompiler.compile(compMeta.type.name, parsedAnimations);\n    const viewResult = this._viewCompiler.compileComponent(\n        compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);\n    if (componentStyles) {\n      targetStatements.push(..._resolveStyleStatements(componentStyles, fileSuffix));\n    }\n    compiledAnimations.forEach(\n        entry => { entry.statements.forEach(statement => { targetStatements.push(statement); }); });\n    targetStatements.push(..._resolveViewStatements(viewResult));\n    return viewResult.viewFactoryVar;\n  }\n\n  private _codgenStyles(\n      fileUrl: string, stylesCompileResult: CompiledStylesheet, fileSuffix: string): SourceModule {\n    _resolveStyleStatements(stylesCompileResult, fileSuffix);\n    return this._codegenSourceModule(\n        fileUrl, _stylesModuleUrl(\n                     stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix),\n        stylesCompileResult.statements, [stylesCompileResult.stylesVar]);\n  }\n\n  private _codegenSourceModule(\n      fileUrl: string, moduleUrl: string, statements: o.Statement[],\n      exportedVars: string[]): SourceModule {\n    return new SourceModule(\n        fileUrl, moduleUrl,\n        this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));\n  }\n}\n\nfunction _resolveViewStatements(compileResult: ViewCompileResult): o.Statement[] {\n  compileResult.dependencies.forEach((dep) => {\n    if (dep instanceof ViewFactoryDependency) {\n      const vfd = <ViewFactoryDependency>dep;\n      vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);\n    } else if (dep instanceof ComponentFactoryDependency) {\n      const cfd = <ComponentFactoryDependency>dep;\n      cfd.placeholder.name = _componentFactoryName(cfd.comp);\n      cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);\n    } else if (dep instanceof DirectiveWrapperDependency) {\n      const dwd = <DirectiveWrapperDependency>dep;\n      dwd.placeholder.moduleUrl = _ngfactoryModuleUrl(dwd.dir.moduleUrl);\n    }\n  });\n  return compileResult.statements;\n}\n\n\nfunction _resolveStyleStatements(\n    compileResult: CompiledStylesheet, fileSuffix: string): o.Statement[] {\n  compileResult.dependencies.forEach((dep) => {\n    dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);\n  });\n  return compileResult.statements;\n}\n\nfunction _ngfactoryModuleUrl(dirUrl: string): string {\n  const urlWithSuffix = _splitTypescriptSuffix(dirUrl);\n  return `${urlWithSuffix[0]}.ngfactory${urlWithSuffix[1]}`;\n}\n\nfunction _componentFactoryName(comp: CompileIdentifierMetadata): string {\n  return `${comp.name}NgFactory`;\n}\n\nfunction _stylesModuleUrl(stylesheetUrl: string, shim: boolean, suffix: string): string {\n  return shim ? `${stylesheetUrl}.shim${suffix}` : `${stylesheetUrl}${suffix}`;\n}\n\nfunction _assertComponent(meta: CompileDirectiveMetadata) {\n  if (!meta.isComponent) {\n    throw new Error(`Could not compile '${meta.type.name}' because it is not a component.`);\n  }\n}\n\nfunction _splitTypescriptSuffix(path: string): string[] {\n  if (path.endsWith('.d.ts')) {\n    return [path.slice(0, -5), '.ts'];\n  }\n\n  const lastDot = path.lastIndexOf('.');\n\n  if (lastDot !== -1) {\n    return [path.substring(0, lastDot), path.substring(lastDot)];\n  }\n\n  return [path, ''];\n}\n\n// Group the symbols by types:\n// - NgModules,\n// - Pipes and Directives.\nfunction _extractModulesAndPipesOrDirectives(\n    programStaticSymbols: StaticSymbol[], metadataResolver: CompileMetadataResolver) {\n  const ngModules: CompileNgModuleMetadata[] = [];\n  const pipesAndDirectives: StaticSymbol[] = [];\n\n  programStaticSymbols.forEach(staticSymbol => {\n    const ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);\n    const directive = metadataResolver.getDirectiveMetadata(staticSymbol, false);\n    const pipe = metadataResolver.getPipeMetadata(<any>staticSymbol, false);\n\n    if (ngModule) {\n      ngModules.push(ngModule);\n    } else if (directive) {\n      pipesAndDirectives.push(staticSymbol);\n    } else if (pipe) {\n      pipesAndDirectives.push(staticSymbol);\n    }\n  });\n\n  return {ngModules, pipesAndDirectives};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}