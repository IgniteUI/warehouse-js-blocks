{"version":3,"file":"animation_view_context.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/animation_view_context.ts"],"names":[],"mappings":"OAOO,EAAC,oBAAoB,EAAC,MAAM,qCAAqC;OAEjE,EAAC,cAAc,IAAI,sBAAsB,EAAC,MAAM,8BAA8B;OAE9E,EAAC,gBAAgB,EAAC,MAAM,iCAAiC;AAEhE;IAAA;QACU,aAAQ,GAAG,IAAI,gBAAgB,EAAE,CAAC;IA6B5C,CAAC;IA3BC,wDAAyB,GAAzB,UAA0B,QAAmB;QAC3C,IAAI,sBAAsB,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;QAC3D,+DAA+D;QAC/D,iEAAiE;QACjE,EAAE,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,IAAI,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC,cAAM,OAAA,QAAQ,EAAE,EAAV,CAAU,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED,6CAAc,GAAd,UAAe,OAAY,EAAE,aAAqB,EAAE,MAAuB;QACzE,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAED,oDAAqB,GAArB,UAAsB,OAAY,EAAE,aAAqB,EAAE,mBAAoC;QAApC,mCAAoC,GAApC,2BAAoC;QAE7F,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAC,CAAC;QACrF,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACH,CAAC;IACH,CAAC;IACH,2BAAC;AAAD,CAAC,AA9BD,IA8BC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationGroupPlayer} from '../animation/animation_group_player';\nimport {AnimationPlayer} from '../animation/animation_player';\nimport {queueAnimation as queueAnimationGlobally} from '../animation/animation_queue';\nimport {AnimationTransitionEvent} from '../animation/animation_transition_event';\nimport {ViewAnimationMap} from '../animation/view_animation_map';\n\nexport class AnimationViewContext {\n  private _players = new ViewAnimationMap();\n\n  onAllActiveAnimationsDone(callback: () => any): void {\n    var activeAnimationPlayers = this._players.getAllPlayers();\n    // we check for the length to avoid having GroupAnimationPlayer\n    // issue an unnecessary microtask when zero players are passed in\n    if (activeAnimationPlayers.length) {\n      new AnimationGroupPlayer(activeAnimationPlayers).onDone(() => callback());\n    } else {\n      callback();\n    }\n  }\n\n  queueAnimation(element: any, animationName: string, player: AnimationPlayer): void {\n    queueAnimationGlobally(player);\n    this._players.set(element, animationName, player);\n  }\n\n  cancelActiveAnimation(element: any, animationName: string, removeAllAnimations: boolean = false):\n      void {\n    if (removeAllAnimations) {\n      this._players.findAllPlayersByElement(element).forEach(player => player.destroy());\n    } else {\n      var player = this._players.find(element, animationName);\n      if (player) {\n        player.destroy();\n      }\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}