import { ElementRef, Renderer, OnInit, OnDestroy, EventEmitter } from '@angular/core';
export declare enum Direction {
    NONE = 0,
    NEXT = 1,
    PREV = 2,
}
export declare class Carousel implements OnDestroy {
    element_ref: ElementRef;
    private renderer;
    loop: boolean;
    pause: boolean;
    interval: number;
    navigation: boolean;
    slideChanged: EventEmitter<{}>;
    slideAdded: EventEmitter<{}>;
    slideRemoved: EventEmitter<{}>;
    carouselPaused: EventEmitter<{}>;
    carouselPlaying: EventEmitter<{}>;
    slides: Array<Slide>;
    private _interval;
    private _lastInterval;
    private _playing;
    private _currentSlide;
    private _destroyed;
    private _total;
    constructor(element_ref: ElementRef, renderer: Renderer);
    ngOnDestroy(): void;
    readonly total: number;
    readonly current: number;
    readonly isPlaying: boolean;
    readonly isDestroyed: boolean;
    get(index: number): Slide;
    add(slide: Slide): void;
    remove(slide: Slide): void;
    select(slide: Slide, direction?: Direction): void;
    next(): void;
    prev(): void;
    play(): void;
    stop(): void;
    private _moveTo(slide, direction);
    private _resetInterval();
    private _restartInterval();
    private _addEventListeners(renderer);
}
export declare class Slide implements OnInit, OnDestroy {
    private carousel;
    private element_ref;
    index: number;
    direction: Direction;
    active: boolean;
    constructor(carousel: Carousel, element_ref: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export declare class CarouselModule {
}
