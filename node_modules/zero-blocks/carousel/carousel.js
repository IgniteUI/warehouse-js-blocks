"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require("@angular/common");
(function (Direction) {
    Direction[Direction["NONE"] = 0] = "NONE";
    Direction[Direction["NEXT"] = 1] = "NEXT";
    Direction[Direction["PREV"] = 2] = "PREV";
})(exports.Direction || (exports.Direction = {}));
var Direction = exports.Direction;
var Carousel = (function () {
    function Carousel(element_ref, renderer) {
        this.element_ref = element_ref;
        this.renderer = renderer;
        this.loop = true;
        this.pause = true;
        this.navigation = true;
        this.slideChanged = new core_1.EventEmitter();
        this.slideAdded = new core_1.EventEmitter();
        this.slideRemoved = new core_1.EventEmitter();
        this.carouselPaused = new core_1.EventEmitter();
        this.carouselPlaying = new core_1.EventEmitter();
        this.slides = [];
        this._total = 0;
        this._addEventListeners(renderer);
    }
    Object.defineProperty(Carousel.prototype, "interval", {
        get: function () {
            return this._interval;
        },
        set: function (value) {
            this._interval = +value;
            this._restartInterval();
        },
        enumerable: true,
        configurable: true
    });
    Carousel.prototype.ngOnDestroy = function () {
        this._destroyed = true;
        if (this._lastInterval) {
            clearInterval(this._lastInterval);
        }
    };
    Object.defineProperty(Carousel.prototype, "total", {
        get: function () {
            return this._total;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "current", {
        get: function () {
            return !this._currentSlide ? 0 : this._currentSlide.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "isPlaying", {
        get: function () {
            return this._playing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "isDestroyed", {
        get: function () {
            return this._destroyed;
        },
        enumerable: true,
        configurable: true
    });
    Carousel.prototype.get = function (index) {
        for (var _i = 0, _a = this.slides; _i < _a.length; _i++) {
            var each = _a[_i];
            if (each.index === index) {
                return each;
            }
        }
    };
    Carousel.prototype.add = function (slide) {
        slide.index = this.total;
        this.slides.push(slide);
        this._total += 1;
        if (this.total === 1 || slide.active) {
            this.select(slide);
            if (this.total === 1) {
                this.play();
            }
        }
        else {
            slide.active = false;
        }
        this.slideAdded.emit(this);
    };
    Carousel.prototype.remove = function (slide) {
        this.slides.splice(slide.index, 1);
        this._total -= 1;
        if (!this.total) {
            this._currentSlide = null;
            return;
        }
        for (var i = 0; i < this.total; i++) {
            this.slides[i].index = i;
        }
        this.slideRemoved.emit(this);
    };
    Carousel.prototype.select = function (slide, direction) {
        if (direction === void 0) { direction = Direction.NONE; }
        var new_index = slide.index;
        if (direction === Direction.NONE) {
            direction = new_index > this.current ? Direction.NEXT : Direction.PREV;
        }
        if (slide && slide !== this._currentSlide) {
            this._moveTo(slide, direction);
        }
    };
    Carousel.prototype.next = function () {
        var index = (this.current + 1) % this.total;
        if (index === 0 && !this.loop) {
            this.stop();
            return;
        }
        return this.select(this.get(index), Direction.NEXT);
    };
    Carousel.prototype.prev = function () {
        var index = this.current - 1 < 0 ?
            this.total - 1 : this.current - 1;
        if (!this.loop && index === this.total - 1) {
            this.stop();
            return;
        }
        return this.select(this.get(index), Direction.PREV);
    };
    Carousel.prototype.play = function () {
        if (!this._playing) {
            this._playing = true;
            this.carouselPlaying.emit(this);
            this._restartInterval();
        }
    };
    Carousel.prototype.stop = function () {
        if (this.pause) {
            this._playing = false;
            this.carouselPaused.emit(this);
            this._resetInterval();
        }
    };
    Carousel.prototype._moveTo = function (slide, direction) {
        if (this._destroyed) {
            return;
        }
        slide.direction = direction;
        slide.active = true;
        if (this._currentSlide) {
            this._currentSlide.direction = direction;
            this._currentSlide.active = false;
        }
        this._currentSlide = slide;
        this.slideChanged.emit(this);
        this._restartInterval();
    };
    Carousel.prototype._resetInterval = function () {
        if (this._lastInterval) {
            clearInterval(this._lastInterval);
            this._lastInterval = null;
        }
    };
    Carousel.prototype._restartInterval = function () {
        var _this = this;
        this._resetInterval();
        if (!isNaN(this.interval) && this.interval > 0) {
            this._lastInterval = setInterval(function () {
                var tick = +_this.interval;
                if (_this._playing && _this.total && !isNaN(tick) && tick > 0) {
                    _this.next();
                }
                else {
                    _this.stop();
                }
            }, this.interval);
        }
    };
    Carousel.prototype._addEventListeners = function (renderer) {
        // Swipe events
        var _this = this;
        renderer.listen(this.element_ref.nativeElement, 'swipeleft', function (event) {
            _this.prev();
        });
        renderer.listen(this.element_ref.nativeElement, 'swiperight', function (event) {
            _this.next();
        });
        // Tap
        renderer.listen(this.element_ref.nativeElement, 'tap', function (event) {
            if (_this._playing) {
                _this.stop();
            }
            else {
                _this.play();
            }
        });
        // Keydown for arrow keys
        renderer.listen(this.element_ref.nativeElement, 'keydown', function (event) {
            switch (event.key) {
                case "ArrowLeft":
                    _this.prev();
                    break;
                case "ArrowRight":
                    _this.next();
                    break;
                default:
                    return;
            }
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Carousel.prototype, "loop", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Carousel.prototype, "pause", void 0);
    __decorate([
        core_1.Input("interval"), 
        __metadata('design:type', Number)
    ], Carousel.prototype, "interval", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Carousel.prototype, "navigation", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], Carousel.prototype, "slideChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], Carousel.prototype, "slideAdded", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], Carousel.prototype, "slideRemoved", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], Carousel.prototype, "carouselPaused", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], Carousel.prototype, "carouselPlaying", void 0);
    Carousel = __decorate([
        core_1.Component({
            selector: 'ig-carousel',
            moduleId: module.id,
            template: "\n      <div tabindex=\"1\" (mouseenter)=\"stop()\" (mouseleave)=\"play()\" (keydown)=\"($event)\" class=\"ig-carousel\">\n          <ul class=\"ig-carousel-indicators\" [hidden]=\"slides.length <= 1\">\n              <li *ngFor=\"let slide of slides\" [class.active]=\"slide.active === true\" (click)=\"select(slide)\"></li>\n          </ul>\n          <div class=\"ig-carousel-inner\">\n              <ng-content></ng-content>\n          </div>\n          <div template=\"ngIf navigation\">\n              <a class=\"left ig-carousel-control\" (click)=\"prev()\" [hidden]=\"!slides.length\">\n                  <span>Prev</span>\n              </a>\n              <a class=\"right ig-carousel-control\" (click)=\"next()\" [hidden]=\"!slides.length\">\n                  <span>Next</span>\n              </a>\n          </div>\n      </div>\n    ",
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], Carousel);
    return Carousel;
}());
exports.Carousel = Carousel;
var Slide = (function () {
    function Slide(carousel, element_ref) {
        this.carousel = carousel;
        this.element_ref = element_ref;
    }
    Slide.prototype.ngOnInit = function () {
        this.carousel.add(this);
    };
    Slide.prototype.ngOnDestroy = function () {
        this.carousel.remove(this);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], Slide.prototype, "index", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], Slide.prototype, "direction", void 0);
    __decorate([
        core_1.HostBinding('class.active'),
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Slide.prototype, "active", void 0);
    Slide = __decorate([
        core_1.Component({
            selector: 'ig-slide',
            moduleId: module.id,
            template: "\n      <div [class.active]=\"active\" class=\"item\">\n          <ng-content></ng-content>\n      </div>\n    "
        }), 
        __metadata('design:paramtypes', [Carousel, core_1.ElementRef])
    ], Slide);
    return Slide;
}());
exports.Slide = Slide;
var CarouselModule = (function () {
    function CarouselModule() {
    }
    CarouselModule = __decorate([
        core_1.NgModule({
            declarations: [Carousel, Slide],
            imports: [common_1.CommonModule],
            exports: [Carousel, Slide]
        }), 
        __metadata('design:paramtypes', [])
    ], CarouselModule);
    return CarouselModule;
}());
exports.CarouselModule = CarouselModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
