"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
var common_1 = require("@angular/common");
// ====================== LIST ================================
// The `<ig-list>` directive is a list container for items and headers 
var List = (function () {
    function List(element) {
        this.element = element;
        this._innerStyle = "ig-list";
        this.children = [];
    }
    Object.defineProperty(List.prototype, "items", {
        get: function () {
            return this.children.filter(function (item) {
                return item instanceof ListItem;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "headers", {
        get: function () {
            return this.children.filter(function (header) {
                return header instanceof ListHeader;
            });
        },
        enumerable: true,
        configurable: true
    });
    List.prototype.removeChild = function (index) {
        this.children.splice(index, 1);
    };
    List.prototype.addChild = function (child) {
        this.children.push(child);
    };
    List = __decorate([
        core_1.Component({
            selector: 'ig-list',
            moduleId: module.id,
            template: "\n      <div #wrapper class=\"{{_innerStyle}}\" [hidden]=\"hidden\">\n        <ng-content></ng-content>\n      </div>\n      <!--<div *ngIf=\"options\" class=\"options\">\n          <button class=\"btn btn-success\"> OK </button>\n          <button class=\"btn btn-danger\"> Cancel </button>\n          <button class=\"btn btn-info\"> More info </button>\n      </div>-->\n    "
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], List);
    return List;
}());
exports.List = List;
// ====================== HEADER ================================
// The `<ig-header>` directive is a header intended for row items in
// a `<ig-list>` container.
var ListHeader = (function () {
    function ListHeader(list, element) {
        this.list = list;
        this.element = element;
        this._innerStyle = "ig-list__header";
    }
    Object.defineProperty(ListHeader.prototype, "index", {
        get: function () {
            return this.list.children.indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    ListHeader.prototype.ngOnInit = function () {
        this.list.addChild(this);
    };
    ListHeader = __decorate([
        core_1.Component({
            selector: 'ig-list-header',
            moduleId: module.id,
            template: "\n      <div #wrapper class=\"{{_innerStyle}}\" [hidden]=\"hidden\">\n        <ng-content></ng-content>\n      </div>\n      <!--<div *ngIf=\"options\" class=\"options\">\n          <button class=\"btn btn-success\"> OK </button>\n          <button class=\"btn btn-danger\"> Cancel </button>\n          <button class=\"btn btn-info\"> More info </button>\n      </div>-->\n    "
        }),
        __param(0, core_1.Inject(core_1.forwardRef(function () { return List; }))), 
        __metadata('design:paramtypes', [List, core_1.ElementRef])
    ], ListHeader);
    return ListHeader;
}());
exports.ListHeader = ListHeader;
// ====================== ITEM ================================
// The `<ig-item>` directive is a container intended for row items in
// a `<ig-list>` container.
var ListItem = (function () {
    function ListItem(list, element, _renderer) {
        this.list = list;
        this.element = element;
        this._renderer = _renderer;
        this._VISIBLE_AREA_ON_FULL_PAN = 40; // in pixels
        this._FRACTION_OF_WIDTH_TO_TRIGGER_GRIP = 0.5; // as a fraction of the item width
        this._initialLeft = null;
        this._innerStyle = "ig-list__item";
        this.hidden = false;
    }
    Object.defineProperty(ListItem.prototype, "index", {
        get: function () {
            return this.list.children.indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "width", {
        get: function () {
            if (this.element && this.element.nativeElement) {
                return this.element.nativeElement.offsetWidth;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "left", {
        get: function () {
            return this.wrapper.nativeElement.offsetLeft;
        },
        set: function (value) {
            var val = value + "";
            if (val.indexOf("px") == -1) {
                val += "px";
            }
            this.wrapper.nativeElement.style.left = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "maxLeft", {
        get: function () {
            return -this.width + this._VISIBLE_AREA_ON_FULL_PAN;
        },
        enumerable: true,
        configurable: true
    });
    ListItem.prototype.ngOnInit = function () {
        this.list.addChild(this);
        this._addEventListeners();
        // Fix for default value of touch-action: none, set by Hammer.js
        this.element.nativeElement.style.touchAction = "inherit";
    };
    ListItem.prototype.ngOnDestroy = function () {
        this.list.removeChild(this.index);
    };
    ListItem.prototype._addEventListeners = function () {
        var _this = this;
        // Do not attach pan events if there is no options - no need to pan the item
        if (this._renderer && this.options) {
            this._renderer.listen(this.element.nativeElement, 'panstart', function (event) { _this.panStart(event); });
            this._renderer.listen(this.element.nativeElement, 'panmove', function (event) { _this.panMove(event); });
            this._renderer.listen(this.element.nativeElement, 'panend', function (event) { _this.panEnd(event); });
        }
    };
    ListItem.prototype.cancelEvent = function (ev) {
        return this.left > 0 || this._initialLeft == null;
    };
    ListItem.prototype.panStart = function (ev) {
        this._initialLeft = this.left;
    };
    ListItem.prototype.panMove = function (ev) {
        var newLeft;
        if (this.cancelEvent(ev)) {
            return;
        }
        newLeft = this._initialLeft + ev.deltaX;
        newLeft = newLeft > 0 ? 0 : newLeft < this.maxLeft ? this.maxLeft : newLeft;
        this.left = newLeft;
    };
    ListItem.prototype.panEnd = function (ev) {
        if (this.left > 0) {
            this.rightMagneticGrip();
        }
        else {
            this.magneticGrip();
        }
        this._initialLeft = null;
    };
    ListItem.prototype.magneticGrip = function () {
        var left = this.left, partialWidth = this.width * this._FRACTION_OF_WIDTH_TO_TRIGGER_GRIP;
        if (partialWidth && left < 0 && -left > partialWidth) {
            this.leftMagneticGrip();
        }
        else {
            this.rightMagneticGrip();
        }
    };
    ListItem.prototype.rightMagneticGrip = function () {
        this.left = 0;
    };
    ListItem.prototype.leftMagneticGrip = function () {
        this.left = this.maxLeft;
    };
    __decorate([
        core_1.ViewChild('wrapper'), 
        __metadata('design:type', core_1.ElementRef)
    ], ListItem.prototype, "wrapper", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ListItem.prototype, "href", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array)
    ], ListItem.prototype, "options", void 0);
    ListItem = __decorate([
        core_1.Component({
            selector: 'ig-list-item',
            moduleId: module.id,
            template: "\n      <div #wrapper class=\"{{_innerStyle}}\" [hidden]=\"hidden\">\n        <ng-content></ng-content>\n      </div>\n      <!--<div *ngIf=\"options\" class=\"options\">\n          <button class=\"btn btn-success\"> OK </button>\n          <button class=\"btn btn-danger\"> Cancel </button>\n          <button class=\"btn btn-info\"> More info </button>\n      </div>-->\n    "
        }),
        __param(0, core_1.Inject(core_1.forwardRef(function () { return List; }))), 
        __metadata('design:paramtypes', [List, core_1.ElementRef, core_1.Renderer])
    ], ListItem);
    return ListItem;
}());
exports.ListItem = ListItem;
var ListModule = (function () {
    function ListModule() {
    }
    ListModule = __decorate([
        core_1.NgModule({
            declarations: [List, ListItem, ListHeader],
            imports: [common_1.CommonModule],
            exports: [List, ListItem, ListHeader]
        }), 
        __metadata('design:paramtypes', [])
    ], ListModule);
    return ListModule;
}());
exports.ListModule = ListModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
