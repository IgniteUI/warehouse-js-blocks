"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var nextId = 0;
var noop = function () { };
function MakeProvider(type) {
    return {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () { return type; }),
        multi: true
    };
}
var IgRadio = (function () {
    function IgRadio() {
        this.id = "ig-radio-" + nextId++;
        this.tabindex = null;
        this.change = new core_1.EventEmitter();
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    IgRadio.prototype.onChange = function (event) {
        this.select();
        this.change.emit(event);
    };
    IgRadio.prototype.select = function () {
        this.checked = true;
        this._onChangeCallback(this.value);
    };
    IgRadio.prototype.writeValue = function (value) {
        this._value = value;
        this.checked = (this._value == this.value);
    };
    IgRadio.prototype.onFocus = function (event) {
        this.focused = true;
    };
    IgRadio.prototype.onBlur = function (event) {
        this.focused = false;
        this._onTouchedCallback();
    };
    IgRadio.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgRadio.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], IgRadio.prototype, "value", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], IgRadio.prototype, "id", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], IgRadio.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], IgRadio.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], IgRadio.prototype, "tabindex", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], IgRadio.prototype, "change", void 0);
    __decorate([
        core_1.ViewChild('radio'), 
        __metadata('design:type', Object)
    ], IgRadio.prototype, "nativeRadio", void 0);
    IgRadio = __decorate([
        core_1.Component({
            selector: 'ig-radio',
            moduleId: module.id,
            template: "\n      <div class=\"ig-control\">\n          <input class=\"ig-control__radio\" type=\"radio\" #radio\n              [attr.id]=\"id\"\n              [attr.name]=\"name\"\n              [attr.value]=\"value\"\n              [attr.tabindex]=\"tabindex\"\n              [disabled]=\"disabled\"\n              [checked]=\"checked\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"\n              (blur)=\"onBlur($event)\"/>\n          <label class =\"ig-control__label\" [attr.for]=\"id\"><ng-content></ng-content></label>\n      </div>\n    ",
            providers: [MakeProvider(IgRadio)]
        }), 
        __metadata('design:paramtypes', [])
    ], IgRadio);
    return IgRadio;
}());
exports.IgRadio = IgRadio;
var IgRadioModule = (function () {
    function IgRadioModule() {
    }
    IgRadioModule = __decorate([
        core_1.NgModule({
            declarations: [IgRadio],
            exports: [IgRadio]
        }), 
        __metadata('design:paramtypes', [])
    ], IgRadioModule);
    return IgRadioModule;
}());
exports.IgRadioModule = IgRadioModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QTVCLEFBQTZCLElBQUE7QUFBaEIscUJBQWEsZ0JBQUcsQ0FBQSIsImZpbGUiOiJyYWRpby9yYWRpby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIE5nTW9kdWxlLFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBWaWV3Q2hpbGQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIGZvcndhcmRSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5sZXQgbmV4dElkID0gMDtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG5mdW5jdGlvbiBNYWtlUHJvdmlkZXIodHlwZTogYW55KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IHR5cGUpLFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgIH07XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWctcmFkaW8nLFxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJpZy1jb250cm9sXCI+XG4gICAgICAgICAgPGlucHV0IGNsYXNzPVwiaWctY29udHJvbF9fcmFkaW9cIiB0eXBlPVwicmFkaW9cIiAjcmFkaW9cbiAgICAgICAgICAgICAgW2F0dHIuaWRdPVwiaWRcIlxuICAgICAgICAgICAgICBbYXR0ci5uYW1lXT1cIm5hbWVcIlxuICAgICAgICAgICAgICBbYXR0ci52YWx1ZV09XCJ2YWx1ZVwiXG4gICAgICAgICAgICAgIFthdHRyLnRhYmluZGV4XT1cInRhYmluZGV4XCJcbiAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICAgICAgICAgICAgW2NoZWNrZWRdPVwiY2hlY2tlZFwiXG4gICAgICAgICAgICAgIChjaGFuZ2UpPVwib25DaGFuZ2UoJGV2ZW50KVwiXG4gICAgICAgICAgICAgIChmb2N1cyk9XCJvbkZvY3VzKCRldmVudClcIlxuICAgICAgICAgICAgICAoYmx1cik9XCJvbkJsdXIoJGV2ZW50KVwiLz5cbiAgICAgICAgICA8bGFiZWwgY2xhc3MgPVwiaWctY29udHJvbF9fbGFiZWxcIiBbYXR0ci5mb3JdPVwiaWRcIj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgIGAsXG4gICAgcHJvdmlkZXJzOiBbTWFrZVByb3ZpZGVyKElnUmFkaW8pXVxufSlcbmV4cG9ydCBjbGFzcyBJZ1JhZGlvIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuXG4gICAgQElucHV0KCkgdmFsdWU6IGFueTtcblxuICAgIEBJbnB1dCgpIGlkOiBzdHJpbmcgPSBgaWctcmFkaW8tJHtuZXh0SWQrK31gO1xuXG4gICAgQElucHV0KCkgbmFtZTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKSB0YWJpbmRleDogbnVtYmVyID0gbnVsbDtcblxuICAgIEBPdXRwdXQoKSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQFZpZXdDaGlsZCgncmFkaW8nKSBuYXRpdmVSYWRpbztcblxuICAgIHByb3RlY3RlZCBfdmFsdWU6IGFueTtcblxuICAgIHByb3RlY3RlZCBjaGVja2VkOiBib29sZWFuO1xuXG4gICAgcHJvdGVjdGVkIGZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgICBvbkNoYW5nZShldmVudCkge1xuICAgICAgICB0aGlzLnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBzZWxlY3QoKSB7XG4gICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sodGhpcy52YWx1ZSk7XG4gICAgfVxuXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuY2hlY2tlZCA9ICh0aGlzLl92YWx1ZSA9PSB0aGlzLnZhbHVlKTtcbiAgICB9XG5cbiAgICBvbkZvY3VzKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgb25CbHVyKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vblRvdWNoZWRDYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29uVG91Y2hlZENhbGxiYWNrOiAoKSA9PiB2b2lkID0gbm9vcDtcbiAgICBwcml2YXRlIF9vbkNoYW5nZUNhbGxiYWNrOiAoXzogYW55KSA9PiB2b2lkID0gbm9vcDtcblxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpIHsgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGZuOyB9XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpIHsgdGhpcy5fb25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjsgfVxufVxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lnUmFkaW9dLFxuICAgIGV4cG9ydHM6IFtJZ1JhZGlvXVxufSlcbmV4cG9ydCBjbGFzcyBJZ1JhZGlvTW9kdWxlIHt9Il19
