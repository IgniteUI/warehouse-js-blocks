"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require("@angular/common");
(function (Type) {
    Type[Type["DEFAULT"] = 0] = "DEFAULT";
    Type[Type["INFO"] = 1] = "INFO";
    Type[Type["SUCCESS"] = 2] = "SUCCESS";
    Type[Type["WARNING"] = 3] = "WARNING";
    Type[Type["ERROR"] = 4] = "ERROR";
})(exports.Type || (exports.Type = {}));
var Type = exports.Type;
var Badge = (function () {
    function Badge() {
        this._type = "";
        this.TypeEnum = Type;
    }
    Object.defineProperty(Badge.prototype, "type", {
        get: function () {
            return this._type === undefined ? "default" : this._type;
        },
        set: function (value) {
            var sizeType = this.TypeEnum[value.toUpperCase()];
            if (sizeType === undefined) {
                this._type = "default";
            }
            else {
                this._type = value.toLowerCase();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "value", {
        get: function () {
            return this._value === undefined ? "?" : this._value;
        },
        set: function (value) {
            if (value === undefined) {
                this._value = "-";
            }
            else {
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "iconBdg", {
        get: function () {
            return this._iconBdg;
        },
        set: function (value) {
            this._iconBdg = value;
        },
        enumerable: true,
        configurable: true
    });
    Badge.prototype.setClasses = function () {
        var classes = {};
        switch (this.TypeEnum[this._type.toUpperCase()]) {
            case Type.DEFAULT:
                classes = {
                    "ig-badge__circle--default": true
                };
                break;
            case Type.INFO:
                classes = {
                    "ig-badge__circle--info": true
                };
                break;
            case Type.SUCCESS:
                classes = {
                    "ig-badge__circle--success": true
                };
                break;
            case Type.WARNING:
                classes = {
                    "ig-badge__circle--warning": true
                };
                break;
            case Type.ERROR:
                classes = {
                    "ig-badge__circle--error": true
                };
                break;
        }
        return classes;
    };
    __decorate([
        core_1.Input("type"), 
        __metadata('design:type', String)
    ], Badge.prototype, "type", null);
    __decorate([
        core_1.Input("value"), 
        __metadata('design:type', String)
    ], Badge.prototype, "value", null);
    __decorate([
        core_1.Input("icon"), 
        __metadata('design:type', String)
    ], Badge.prototype, "iconBdg", null);
    Badge = __decorate([
        core_1.Component({
            selector: 'ig-badge',
            moduleId: module.id,
            template: "\n      <div class=\"ig-badge\">\n      \t<div class=\"ig-badge__circle\" [ngClass]=\"setClasses()\">\n      \t\t<span *ngIf=\"!iconBdg\" class=\"ig-badge__circle-value\">{{value}}</span>\n      \t\t<i *ngIf=\"iconBdg\" class=\"material-icons ig-badge__circle-value\">{{iconBdg}}</i>\n      \t</div>\n      </div>\n    "
        }), 
        __metadata('design:paramtypes', [])
    ], Badge);
    return Badge;
}());
exports.Badge = Badge;
var BadgeModule = (function () {
    function BadgeModule() {
    }
    BadgeModule = __decorate([
        core_1.NgModule({
            declarations: [Badge],
            imports: [common_1.CommonModule],
            exports: [Badge]
        }), 
        __metadata('design:paramtypes', [])
    ], BadgeModule);
    return BadgeModule;
}());
exports.BadgeModule = BadgeModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUM7UUFDZCxDQUFDO1FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBakVEO1FBQUMsWUFBSyxDQUFDLE1BQU0sQ0FBQzs7cUNBQUE7SUFlZDtRQUFDLFlBQUssQ0FBQyxPQUFPLENBQUM7O3NDQUFBO0lBU2Y7UUFBQyxZQUFLLENBQUMsTUFBTSxDQUFDOzt3Q0FBQTtJQTlDbEI7UUFBQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFVBQVU7WUFDcEIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSxpVUFPVDtTQUNKLENBQUM7O2FBQUE7SUE2RUYsWUFBQztBQUFELENBNUVBLEFBNEVDLElBQUE7QUE1RVksYUFBSyxRQTRFakIsQ0FBQTtBQU9EO0lBQUE7SUFDQSxDQUFDO0lBTkQ7UUFBQyxlQUFRLENBQUM7WUFDTixZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDckIsT0FBTyxFQUFFLENBQUMscUJBQVksQ0FBQztZQUN2QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7U0FDbkIsQ0FBQzs7bUJBQUE7SUFFRixrQkFBQztBQUFELENBREEsQUFDQyxJQUFBO0FBRFksbUJBQVcsY0FDdkIsQ0FBQSIsImZpbGUiOiJiYWRnZS9iYWRnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgTmdNb2R1bGUsXG4gICAgRGlyZWN0aXZlLFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIFJlbmRlcmVyLFxuICAgIE9uSW5pdCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgVmlld0NoaWxkLFxuICAgIEhvc3RCaW5kaW5nXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuXG5leHBvcnQgZW51bSBUeXBlIHsgREVGQVVMVCwgSU5GTywgU1VDQ0VTUywgV0FSTklORywgRVJST1IgfVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lnLWJhZGdlJyxcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiaWctYmFkZ2VcIj5cbiAgICAgIFx0PGRpdiBjbGFzcz1cImlnLWJhZGdlX19jaXJjbGVcIiBbbmdDbGFzc109XCJzZXRDbGFzc2VzKClcIj5cbiAgICAgIFx0XHQ8c3BhbiAqbmdJZj1cIiFpY29uQmRnXCIgY2xhc3M9XCJpZy1iYWRnZV9fY2lyY2xlLXZhbHVlXCI+e3t2YWx1ZX19PC9zcGFuPlxuICAgICAgXHRcdDxpICpuZ0lmPVwiaWNvbkJkZ1wiIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgaWctYmFkZ2VfX2NpcmNsZS12YWx1ZVwiPnt7aWNvbkJkZ319PC9pPlxuICAgICAgXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGBcbn0pXG5leHBvcnQgY2xhc3MgQmFkZ2Uge1xuICAgIHByaXZhdGUgX3R5cGU6IHN0cmluZyA9IFwiXCI7XG4gICAgcHJpdmF0ZSBfdmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIF9pY29uQmRnOiBzdHJpbmc7XG4gICAgcHVibGljIFR5cGVFbnVtID0gVHlwZTtcblxuICAgIGdldCB0eXBlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlID09PSB1bmRlZmluZWQgPyBcImRlZmF1bHRcIiA6IHRoaXMuX3R5cGU7XG4gICAgfVxuXG4gICAgQElucHV0KFwidHlwZVwiKVxuICAgIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdmFyIHNpemVUeXBlID0gdGhpcy5UeXBlRW51bVt2YWx1ZS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoc2l6ZVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fdHlwZSA9IFwiZGVmYXVsdFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlID09PSB1bmRlZmluZWQgPyBcIj9cIiA6IHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dChcInZhbHVlXCIpXG4gICAgc2V0IHZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gXCItXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KFwiaWNvblwiKVxuICAgIHB1YmxpYyBnZXQgaWNvbkJkZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faWNvbkJkZztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGljb25CZGcodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9pY29uQmRnID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc2V0Q2xhc3NlcygpIHtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSB7fTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuVHlwZUVudW1bdGhpcy5fdHlwZS50b1VwcGVyQ2FzZSgpXSkge1xuICAgICAgICAgICAgY2FzZSBUeXBlLkRFRkFVTFQ6XG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZy1iYWRnZV9fY2lyY2xlLS1kZWZhdWx0XCI6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUeXBlLklORk86XG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZy1iYWRnZV9fY2lyY2xlLS1pbmZvXCI6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUeXBlLlNVQ0NFU1M6XG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZy1iYWRnZV9fY2lyY2xlLS1zdWNjZXNzXCI6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUeXBlLldBUk5JTkc6XG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZy1iYWRnZV9fY2lyY2xlLS13YXJuaW5nXCI6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUeXBlLkVSUk9SOlxuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiaWctYmFkZ2VfX2NpcmNsZS0tZXJyb3JcIjogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xhc3NlcztcbiAgICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbQmFkZ2VdLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtCYWRnZV1cbn0pXG5leHBvcnQgY2xhc3MgQmFkZ2VNb2R1bGUge1xufSJdfQ==
