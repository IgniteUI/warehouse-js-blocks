"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require("@angular/common");
(function (Type) {
    Type[Type["DEFAULT"] = 0] = "DEFAULT";
    Type[Type["INFO"] = 1] = "INFO";
    Type[Type["SUCCESS"] = 2] = "SUCCESS";
    Type[Type["WARNING"] = 3] = "WARNING";
    Type[Type["ERROR"] = 4] = "ERROR";
})(exports.Type || (exports.Type = {}));
var Type = exports.Type;
(function (Position) {
    Position[Position["TOP_LEFT"] = 0] = "TOP_LEFT";
    Position[Position["TOP_RIGHT"] = 1] = "TOP_RIGHT";
    Position[Position["BOTTOM_LEFT"] = 2] = "BOTTOM_LEFT";
    Position[Position["BOTTOM_RIGHT"] = 3] = "BOTTOM_RIGHT";
})(exports.Position || (exports.Position = {}));
var Position = exports.Position;
var Badge = (function () {
    function Badge() {
        this._type = "";
        this.TypeEnum = Type;
        this.PositionEnum = Position;
    }
    Object.defineProperty(Badge.prototype, "type", {
        get: function () {
            return this._type === undefined ? "default" : this._type;
        },
        set: function (value) {
            var sizeType = this.TypeEnum[value.toUpperCase()];
            if (sizeType === undefined) {
                this._type = "default";
            }
            else {
                this._type = value.toLowerCase();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "position", {
        get: function () {
            return this._position === undefined ? "top-right" : this._position;
        },
        set: function (value) {
            var positionType = this.PositionEnum[value.replace("-", "_").toUpperCase()];
            if (positionType === undefined) {
                this._position = "top-right";
            }
            else {
                this._position = value.toLowerCase();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "value", {
        get: function () {
            return this._value === undefined ? "?" : this._value;
        },
        set: function (value) {
            if (value === undefined) {
                this._value = "-";
            }
            else {
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "iconBdg", {
        get: function () {
            return this._iconBdg;
        },
        set: function (value) {
            this._iconBdg = value;
        },
        enumerable: true,
        configurable: true
    });
    Badge.prototype.setClasses = function () {
        var classes = {};
        switch (this.TypeEnum[this._type.toUpperCase()]) {
            case Type.DEFAULT:
                classes = {
                    "ig-badge__circle--default": true
                };
                break;
            case Type.INFO:
                classes = {
                    "ig-badge__circle--info": true
                };
                break;
            case Type.SUCCESS:
                classes = {
                    "ig-badge__circle--success": true
                };
                break;
            case Type.WARNING:
                classes = {
                    "ig-badge__circle--warning": true
                };
                break;
            case Type.ERROR:
                classes = {
                    "ig-badge__circle--error": true
                };
                break;
        }
        return classes;
    };
    Badge.prototype.setPosition = function () {
        var className = {};
        switch (this.PositionEnum[this.position.replace("-", "_").toUpperCase()]) {
            case Position.BOTTOM_LEFT:
                className = {
                    "ig-badge--bottom-left": true
                };
                break;
            case Position.BOTTOM_RIGHT:
                className = {
                    "ig-badge--bottom-right": true
                };
                break;
            case Position.TOP_LEFT:
                className = {
                    "ig-badge--top-left": true
                };
                break;
            case Position.TOP_RIGHT:
                className = {
                    "ig-badge--top-right": true
                };
                break;
        }
        return className;
    };
    __decorate([
        core_1.Input("type"), 
        __metadata('design:type', String)
    ], Badge.prototype, "type", null);
    __decorate([
        core_1.Input("position"), 
        __metadata('design:type', String)
    ], Badge.prototype, "position", null);
    __decorate([
        core_1.Input("value"), 
        __metadata('design:type', String)
    ], Badge.prototype, "value", null);
    __decorate([
        core_1.Input("icon"), 
        __metadata('design:type', String)
    ], Badge.prototype, "iconBdg", null);
    Badge = __decorate([
        core_1.Component({
            selector: 'ig-badge',
            moduleId: module.id,
            template: "\n      <div [ngClass]=\"setPosition()\">\n      \t<div class=\"ig-badge__circle\" [ngClass]=\"setClasses()\">\n      \t\t<span *ngIf=\"!iconBdg\" class=\"ig-badge__circle-value\">{{value}}</span>\n      \t\t<i *ngIf=\"iconBdg\" class=\"material-icons ig-badge__circle-value\">{{iconBdg}}</i>\n      \t</div>\n      </div>\n    "
        }), 
        __metadata('design:paramtypes', [])
    ], Badge);
    return Badge;
}());
exports.Badge = Badge;
var BadgeModule = (function () {
    function BadgeModule() {
    }
    BadgeModule = __decorate([
        core_1.NgModule({
            declarations: [Badge],
            imports: [common_1.CommonModule],
            exports: [Badge]
        }), 
        __metadata('design:paramtypes', [])
    ], BadgeModule);
    return BadgeModule;
}());
exports.BadgeModule = BadgeModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
