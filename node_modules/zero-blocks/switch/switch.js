"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var noop = function () { };
var nextId = 0;
function MakeProvider(type) {
    return {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () { return type; }),
        multi: true
    };
}
var IgSwitch = (function () {
    function IgSwitch() {
        this.id = "ig-switch-" + nextId++;
        this.disabled = false;
        this.tabindex = null;
        this.checked = false;
        this.change = new core_1.EventEmitter();
        this.focused = false;
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    IgSwitch.prototype.onChange = function (event) {
        if (this.disabled) {
            return;
        }
        this.checked = !this.checked;
        this._onChangeCallback(this.checked);
        this.change.emit(event);
    };
    IgSwitch.prototype.onFocus = function (event) {
        this.focused = true;
    };
    IgSwitch.prototype.onBlur = function (event) {
        this.focused = false;
        this._onTouchedCallback();
    };
    IgSwitch.prototype.writeValue = function (value) {
        if (this.disabled) {
            return;
        }
        this._value = value;
        this.checked = this._value;
    };
    IgSwitch.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgSwitch.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], IgSwitch.prototype, "value", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], IgSwitch.prototype, "id", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], IgSwitch.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], IgSwitch.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], IgSwitch.prototype, "tabindex", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], IgSwitch.prototype, "checked", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], IgSwitch.prototype, "change", void 0);
    __decorate([
        core_1.ViewChild('checkbox'), 
        __metadata('design:type', Object)
    ], IgSwitch.prototype, "nativeCheckbox", void 0);
    IgSwitch = __decorate([
        core_1.Component({
            selector: "ig-switch",
            moduleId: module.id,
            template: "\n      <div class=\"ig-control\">\n          <input class=\"ig-control__switch\" #checkbox type=\"checkbox\"\n              [attr.id]=\"id\"\n              [attr.name]=\"name\"\n              [attr.value]=\"value\"\n              [attr.tabindex]=\"tabindex\"\n              [disabled]=\"disabled\"\n              [checked]=\"checked\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"\n              (blur)=\"onBlur($event)\">\n          <span class=\"ig-control__text\">\n              <ng-content></ng-content>\n          </span>\n          <label class=\"ig-control__label\" [attr.for]=\"id\">\n          </label>\n      </div>\n    ",
            providers: [MakeProvider(IgSwitch)]
        }), 
        __metadata('design:paramtypes', [])
    ], IgSwitch);
    return IgSwitch;
}());
exports.IgSwitch = IgSwitch;
var SwitchModule = (function () {
    function SwitchModule() {
    }
    SwitchModule = __decorate([
        core_1.NgModule({
            declarations: [IgSwitch],
            exports: [IgSwitch]
        }), 
        __metadata('design:paramtypes', [])
    ], SwitchModule);
    return SwitchModule;
}());
exports.SwitchModule = SwitchModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUM7QUFBRCxDQWpEQSxBQWlEQyxJQUFBO0FBakRZLGdCQUFRLFdBaURwQixDQUFBO0FBT0Q7SUFBQTtJQUEyQixDQUFDO0lBSjVCO1FBQUMsZUFBUSxDQUFDO1lBQ04sWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ3hCLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztTQUN0QixDQUFDOztvQkFBQTtJQUN5QixtQkFBQztBQUFELENBQTNCLEFBQTRCLElBQUE7QUFBZixvQkFBWSxlQUFHLENBQUEiLCJmaWxlIjoic3dpdGNoL3N3aXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgTmdNb2R1bGUsXG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgVmlld0NoaWxkLFxuICAgIGZvcndhcmRSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5sZXQgbmV4dElkID0gMDtcblxuZnVuY3Rpb24gTWFrZVByb3ZpZGVyKHR5cGU6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiB0eXBlKSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICB9O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJpZy1zd2l0Y2hcIixcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiaWctY29udHJvbFwiPlxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImlnLWNvbnRyb2xfX3N3aXRjaFwiICNjaGVja2JveCB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBbYXR0ci5pZF09XCJpZFwiXG4gICAgICAgICAgICAgIFthdHRyLm5hbWVdPVwibmFtZVwiXG4gICAgICAgICAgICAgIFthdHRyLnZhbHVlXT1cInZhbHVlXCJcbiAgICAgICAgICAgICAgW2F0dHIudGFiaW5kZXhdPVwidGFiaW5kZXhcIlxuICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgICBbY2hlY2tlZF09XCJjaGVja2VkXCJcbiAgICAgICAgICAgICAgKGNoYW5nZSk9XCJvbkNoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgKGZvY3VzKT1cIm9uRm9jdXMoJGV2ZW50KVwiXG4gICAgICAgICAgICAgIChibHVyKT1cIm9uQmx1cigkZXZlbnQpXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJpZy1jb250cm9sX190ZXh0XCI+XG4gICAgICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiaWctY29udHJvbF9fbGFiZWxcIiBbYXR0ci5mb3JdPVwiaWRcIj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgYCxcbiAgICBwcm92aWRlcnM6IFtNYWtlUHJvdmlkZXIoSWdTd2l0Y2gpXVxufSlcbmV4cG9ydCBjbGFzcyBJZ1N3aXRjaCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcblxuICAgIEBJbnB1dCgpIHZhbHVlOiBhbnk7XG4gICAgQElucHV0KCkgaWQ6IHN0cmluZyA9IGBpZy1zd2l0Y2gtJHtuZXh0SWQrK31gO1xuICAgIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcbiAgICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIEBJbnB1dCgpIHRhYmluZGV4OiBudW1iZXIgPSBudWxsO1xuICAgIEBJbnB1dCgpIGNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAVmlld0NoaWxkKCdjaGVja2JveCcpIG5hdGl2ZUNoZWNrYm94O1xuXG4gICAgcHJvdGVjdGVkIF92YWx1ZTogYW55O1xuXG4gICAgZm9jdXNlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgb25DaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XG4gICAgICAgIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sodGhpcy5jaGVja2VkKTtcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdChldmVudCk7XG4gICAgfVxuXG4gICAgb25Gb2N1cyhldmVudCkge1xuICAgICAgICB0aGlzLmZvY3VzZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIG9uQmx1cihldmVudCkge1xuICAgICAgICB0aGlzLmZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB3cml0ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSBub29wO1xuICAgIHByaXZhdGUgX29uQ2hhbmdlQ2FsbGJhY2s6IChfOiBhbnkpID0+IHZvaWQgPSBub29wO1xuXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCkgeyB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gZm47IH1cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCkgeyB0aGlzLl9vblRvdWNoZWRDYWxsYmFjayA9IGZuOyB9XG59XG5cblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ1N3aXRjaF0sXG4gICAgZXhwb3J0czogW0lnU3dpdGNoXVxufSlcbmV4cG9ydCBjbGFzcyBTd2l0Y2hNb2R1bGUge30iXX0=
