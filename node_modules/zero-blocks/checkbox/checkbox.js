"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var noop = function () { };
var nextId = 0;
function MakeProvider(type) {
    return {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () { return type; }),
        multi: true
    };
}
var IgCheckbox = (function () {
    function IgCheckbox() {
        this.id = "ig-checkbox-" + nextId++;
        this.disabled = false;
        this.tabindex = null;
        this.checked = false;
        this.change = new core_1.EventEmitter();
        this.focused = false;
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    IgCheckbox.prototype.onChange = function (event) {
        if (this.disabled) {
            return;
        }
        this.checked = !this.checked;
        this._onChangeCallback(this.checked);
        this.change.emit(event);
    };
    IgCheckbox.prototype.onFocus = function (event) {
        this.focused = true;
    };
    IgCheckbox.prototype.onBlur = function (event) {
        this.focused = false;
        this._onTouchedCallback();
    };
    IgCheckbox.prototype.writeValue = function (value) {
        if (this.disabled) {
            return;
        }
        this._value = value;
        this.checked = !!this._value;
    };
    IgCheckbox.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgCheckbox.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], IgCheckbox.prototype, "value", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], IgCheckbox.prototype, "id", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], IgCheckbox.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], IgCheckbox.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], IgCheckbox.prototype, "tabindex", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], IgCheckbox.prototype, "checked", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], IgCheckbox.prototype, "change", void 0);
    __decorate([
        core_1.ViewChild('checkbox'), 
        __metadata('design:type', Object)
    ], IgCheckbox.prototype, "nativeCheckbox", void 0);
    IgCheckbox = __decorate([
        core_1.Component({
            selector: "ig-checkbox",
            moduleId: module.id,
            template: "\n      <div class=\"ig-control\">\n          <input class=\"ig-control__cbx\" #checkbox type=\"checkbox\"\n              [attr.id]=\"id\"\n              [attr.name]=\"name\"\n              [attr.value]=\"value\"\n              [attr.tabindex]=\"tabindex\"\n              [attr.disabled]=\"disabled ? true : null\"\n              [checked]=\"checked\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"\n              (blur)=\"onBlur($event)\">\n          <label class=\"ig-control__label\" [attr.for]=\"id\">\n              <ng-content></ng-content>\n          </label>\n      </div>\n    ",
            providers: [MakeProvider(IgCheckbox)]
        }), 
        __metadata('design:paramtypes', [])
    ], IgCheckbox);
    return IgCheckbox;
}());
exports.IgCheckbox = IgCheckbox;
var CheckboxModule = (function () {
    function CheckboxModule() {
    }
    CheckboxModule = __decorate([
        core_1.NgModule({
            declarations: [IgCheckbox],
            exports: [IgCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxModule);
    return CheckboxModule;
}());
exports.CheckboxModule = CheckboxModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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O2tCQUFBO0lBa0RGLGlCQUFDO0FBQUQsQ0FqREEsQUFpREMsSUFBQTtBQWpEWSxrQkFBVSxhQWlEdEIsQ0FBQTtBQU9EO0lBQUE7SUFBNkIsQ0FBQztJQUo5QjtRQUFDLGVBQVEsQ0FBQztZQUNOLFlBQVksRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUMxQixPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDeEIsQ0FBQzs7c0JBQUE7SUFDMkIscUJBQUM7QUFBRCxDQUE3QixBQUE4QixJQUFBO0FBQWpCLHNCQUFjLGlCQUFHLENBQUEiLCJmaWxlIjoiY2hlY2tib3gvY2hlY2tib3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIE5nTW9kdWxlLFxuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIFZpZXdDaGlsZCxcbiAgICBmb3J3YXJkUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xubGV0IG5leHRJZCA9IDA7XG5cbmZ1bmN0aW9uIE1ha2VQcm92aWRlcih0eXBlOiBhbnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gdHlwZSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfTtcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctY2hlY2tib3hcIixcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiaWctY29udHJvbFwiPlxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImlnLWNvbnRyb2xfX2NieFwiICNjaGVja2JveCB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBbYXR0ci5pZF09XCJpZFwiXG4gICAgICAgICAgICAgIFthdHRyLm5hbWVdPVwibmFtZVwiXG4gICAgICAgICAgICAgIFthdHRyLnZhbHVlXT1cInZhbHVlXCJcbiAgICAgICAgICAgICAgW2F0dHIudGFiaW5kZXhdPVwidGFiaW5kZXhcIlxuICAgICAgICAgICAgICBbYXR0ci5kaXNhYmxlZF09XCJkaXNhYmxlZCA/IHRydWUgOiBudWxsXCJcbiAgICAgICAgICAgICAgW2NoZWNrZWRdPVwiY2hlY2tlZFwiXG4gICAgICAgICAgICAgIChjaGFuZ2UpPVwib25DaGFuZ2UoJGV2ZW50KVwiXG4gICAgICAgICAgICAgIChmb2N1cyk9XCJvbkZvY3VzKCRldmVudClcIlxuICAgICAgICAgICAgICAoYmx1cik9XCJvbkJsdXIoJGV2ZW50KVwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImlnLWNvbnRyb2xfX2xhYmVsXCIgW2F0dHIuZm9yXT1cImlkXCI+XG4gICAgICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgYCxcbiAgICBwcm92aWRlcnM6IFtNYWtlUHJvdmlkZXIoSWdDaGVja2JveCldXG59KVxuZXhwb3J0IGNsYXNzIElnQ2hlY2tib3ggaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgICBASW5wdXQoKSB2YWx1ZTogYW55O1xuICAgIEBJbnB1dCgpIGlkOiBzdHJpbmcgPSBgaWctY2hlY2tib3gtJHtuZXh0SWQrK31gO1xuICAgIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcbiAgICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIEBJbnB1dCgpIHRhYmluZGV4OiBudW1iZXIgPSBudWxsO1xuICAgIEBJbnB1dCgpIGNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAVmlld0NoaWxkKCdjaGVja2JveCcpIG5hdGl2ZUNoZWNrYm94O1xuXG4gICAgcHJvdGVjdGVkIF92YWx1ZTogYW55O1xuXG4gICAgZm9jdXNlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgb25DaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XG4gICAgICAgIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sodGhpcy5jaGVja2VkKTtcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdChldmVudCk7XG4gICAgfVxuXG4gICAgb25Gb2N1cyhldmVudCkge1xuICAgICAgICB0aGlzLmZvY3VzZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIG9uQmx1cihldmVudCkge1xuICAgICAgICB0aGlzLmZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB3cml0ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gISF0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9vblRvdWNoZWRDYWxsYmFjazogKCkgPT4gdm9pZCA9IG5vb3A7XG4gICAgcHJpdmF0ZSBfb25DaGFuZ2VDYWxsYmFjazogKF86IGFueSkgPT4gdm9pZCA9IG5vb3A7XG5cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB2b2lkKSB7IHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBmbjsgfVxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKSB7IHRoaXMuX29uVG91Y2hlZENhbGxiYWNrID0gZm47IH1cbn1cblxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lnQ2hlY2tib3hdLFxuICAgIGV4cG9ydHM6IFtJZ0NoZWNrYm94XVxufSlcbmV4cG9ydCBjbGFzcyBDaGVja2JveE1vZHVsZSB7fSJdfQ==
