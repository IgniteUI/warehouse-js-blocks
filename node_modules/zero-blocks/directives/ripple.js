"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var RippleDirective = (function () {
    function RippleDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._centered = false;
        this._remaining = 0;
        this.rippleTarget = "";
        this.rippleDuration = 600;
        this.container = el.nativeElement;
    }
    Object.defineProperty(RippleDirective.prototype, "centered", {
        set: function (value) {
            this._centered = value || this.centered;
        },
        enumerable: true,
        configurable: true
    });
    RippleDirective.prototype.onMouseDown = function (event) {
        this._ripple(event);
    };
    RippleDirective.prototype._ripple = function (event) {
        var _this = this;
        var target, x, y, rippler, rectBounds;
        if (this.rippleTarget) {
            target = this.container.querySelector(this.rippleTarget) || this.container;
        }
        else {
            target = this.container;
        }
        rectBounds = target.getBoundingClientRect();
        var top = rectBounds.top, left = rectBounds.left, width = rectBounds.width, height = rectBounds.height;
        // Take into account viewport scroll
        top += window.scrollY;
        left += window.scrollX;
        this.renderer.setElementClass(target, 'ig-ripple-host', true);
        rippler = this.renderer.createElement(target, 'span');
        this.renderer.setElementClass(rippler, 'ig-ripple-host__ripple', true);
        if (width >= height) {
            height = width;
        }
        else {
            width = height;
        }
        x = event.pageX - left - width / 2;
        y = event.pageY - top - height / 2;
        this.renderer.setElementStyle(rippler, 'width', width + "px");
        this.renderer.setElementStyle(rippler, 'height', height + "px");
        this.renderer.setElementStyle(rippler, 'top', y + "px");
        this.renderer.setElementStyle(rippler, 'left', x + "px");
        if (this._centered) {
            this.renderer.setElementStyle(rippler, 'top', '0');
            this.renderer.setElementStyle(rippler, 'left', '0');
        }
        if (this.rippleColor) {
            this.renderer.setElementStyle(rippler, 'background', this.rippleColor);
        }
        var FRAMES = [
            { opacity: 0.5, transform: 'scale(0)' },
            { opacity: 0, transform: 'scale(2)' },
        ];
        var animation = rippler.animate(FRAMES, {
            duration: this.rippleDuration,
            fill: 'forwards'
        });
        this._remaining++;
        animation.onfinish = function (ev) {
            target.removeChild(rippler);
            _this._remaining--;
            if (_this._remaining <= 0) {
                _this.renderer.setElementClass(target, 'ig-ripple-host', false);
            }
        };
    };
    __decorate([
        core_1.Input("igRippleTarget"), 
        __metadata('design:type', String)
    ], RippleDirective.prototype, "rippleTarget", void 0);
    __decorate([
        core_1.Input('igRippleCentered'), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], RippleDirective.prototype, "centered", null);
    __decorate([
        core_1.Input('igRipple'), 
        __metadata('design:type', String)
    ], RippleDirective.prototype, "rippleColor", void 0);
    __decorate([
        core_1.Input('igRippleDuration'), 
        __metadata('design:type', Number)
    ], RippleDirective.prototype, "rippleDuration", void 0);
    __decorate([
        core_1.HostListener('mousedown', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], RippleDirective.prototype, "onMouseDown", null);
    RippleDirective = __decorate([
        core_1.Directive({
            selector: '[igRipple]',
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], RippleDirective);
    return RippleDirective;
}());
var IgRippleModule = (function () {
    function IgRippleModule() {
    }
    IgRippleModule = __decorate([
        core_1.NgModule({
            declarations: [RippleDirective],
            imports: [common_1.CommonModule],
            exports: [RippleDirective]
        }), 
        __metadata('design:paramtypes', [])
    ], IgRippleModule);
    return IgRippleModule;
}());
exports.IgRippleModule = IgRippleModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
