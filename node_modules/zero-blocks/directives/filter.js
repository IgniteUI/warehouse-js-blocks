"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var FilterDirective = (function () {
    function FilterDirective(element, renderer) {
        this.element = element;
        this.filtering = new core_1.EventEmitter(false); // synchronous event emitter
        this.filtered = new core_1.EventEmitter();
    }
    FilterDirective.prototype.ngOnChanges = function (changes) {
        // Detect only changes of input value
        if (changes["filterOptions"] &&
            changes["filterOptions"].currentValue &&
            changes["filterOptions"].currentValue["inputValue"] !== undefined &&
            changes["filterOptions"].previousValue &&
            changes["filterOptions"].currentValue["inputValue"] !== changes["filterOptions"].previousValue["inputValue"]) {
            this.filter();
        }
    };
    FilterDirective.prototype.filter = function () {
        if (!this.filterOptions.items) {
            return;
        }
        var args = { cancel: false, items: this.filterOptions.items };
        this.filtering.emit(args);
        if (args.cancel) {
            return;
        }
        var pipe = new FilterPipe();
        var filtered = pipe.transform(this.filterOptions.items, this.filterOptions);
        this.filtered.emit({ filteredItems: filtered });
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FilterDirective.prototype, "filtering", void 0);
    __decorate([
        // synchronous event emitter
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FilterDirective.prototype, "filtered", void 0);
    __decorate([
        core_1.Input("filter"), 
        __metadata('design:type', FilterOptions)
    ], FilterDirective.prototype, "filterOptions", void 0);
    FilterDirective = __decorate([
        core_1.Directive({
            selector: '[filter]',
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], FilterDirective);
    return FilterDirective;
}());
exports.FilterDirective = FilterDirective;
var FilterPipe = (function () {
    function FilterPipe() {
    }
    FilterPipe.prototype.transform = function (items, 
        // options - initial settings of filter functionality
        options) {
        var result = [];
        if (!items || !items.length || !options) {
            return;
        }
        if (options.items) {
            items = options.items;
        }
        result = items.filter(function (item) {
            var match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);
            if (match) {
                if (options.metConditionFn) {
                    options.metConditionFn(item);
                }
            }
            else {
                if (options.overdueConditionFn) {
                    options.overdueConditionFn(item);
                }
            }
            return match;
        });
        return result;
    };
    FilterPipe = __decorate([
        core_1.Pipe({
            name: "filter",
            pure: false
        }), 
        __metadata('design:paramtypes', [])
    ], FilterPipe);
    return FilterPipe;
}());
exports.FilterPipe = FilterPipe;
var FilterOptions = (function () {
    function FilterOptions() {
        // Input text value that will be used as a filtering pattern (matching condition is based on it)
        this.inputValue = "";
    }
    // Function - get value to be tested from the item
    // item - single item of the list to be filtered
    // key - property name of item, which value should be tested
    // Default behavior - returns "key"- named property value of item if key si provided, otherwise textContent of the item's html element
    FilterOptions.prototype.get_value = function (item, key) {
        var result = "";
        if (key) {
            result = item[key].toString();
        }
        else if (item.element && item.element.nativeElement) {
            result = item.element.nativeElement.textContent.trim();
        }
        return result;
    };
    // Function - formats the original text before matching process
    // Default behavior - returns text to lower case
    FilterOptions.prototype.formatter = function (valueToTest) {
        return valueToTest.toLowerCase();
    };
    ;
    // Function - determines whether the item met the condition
    // valueToTest - text value that should be tested
    // inputValue - text value from input that condition is based on
    // Default behavior - "contains"
    FilterOptions.prototype.matchFn = function (valueToTest, inputValue) {
        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || "") > -1;
    };
    ;
    // Function - executed after matching test for every matched item
    // Default behavior - shows the item
    FilterOptions.prototype.metConditionFn = function (item) {
        if (item.hasOwnProperty("hidden")) {
            item.hidden = false;
        }
    };
    ;
    // Function - executed for every NOT matched item after matching test
    // Default behavior - hides the item
    FilterOptions.prototype.overdueConditionFn = function (item) {
        if (item.hasOwnProperty("hidden")) {
            item.hidden = true;
        }
    };
    ;
    return FilterOptions;
}());
exports.FilterOptions = FilterOptions;
var FilterModule = (function () {
    function FilterModule() {
    }
    FilterModule = __decorate([
        core_1.NgModule({
            declarations: [FilterDirective, FilterPipe],
            imports: [common_1.CommonModule],
            exports: [FilterDirective, FilterPipe]
        }), 
        __metadata('design:paramtypes', [])
    ], FilterModule);
    return FilterModule;
}());
exports.FilterModule = FilterModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
