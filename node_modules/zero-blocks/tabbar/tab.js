"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require("@angular/common");
var TabBar = (function () {
    function TabBar(_element) {
        this._element = _element;
        this._maxNumberTabsDisplayed = 5;
        this._itemStyle = "ig-tab-bar-inner";
        this.tabs = [];
        this.alignment = "top";
        this.selectTab = new core_1.EventEmitter();
    }
    Object.defineProperty(TabBar.prototype, "_visibleTabs", {
        get: function () {
            var _this = this;
            return this.tabs.length > this._maxNumberTabsDisplayed ? this.tabs.filter(function (tab) { return tab.index < _this._maxNumberTabsDisplayed - 1; }) : this.tabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBar.prototype, "_height", {
        get: function () {
            return this._element.nativeElement.offsetHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBar.prototype, "_columns", {
        get: function () {
            return this.tabs.length > this._maxNumberTabsDisplayed ? this._maxNumberTabsDisplayed : this.tabs.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBar.prototype, "tabListHeight", {
        get: function () {
            if (this._tabList) {
                return this._tabList.nativeElement.offsetHeight;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBar.prototype, "selectedTab", {
        get: function () {
            var selectedTabs = this.tabs.filter(function (tab) { return tab.isSelected; });
            if (selectedTabs.length == 0) {
                return undefined;
            }
            else {
                return selectedTabs[selectedTabs.length - 1];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBar.prototype, "selectedIndex", {
        get: function () {
            if (this.selectedTab) {
                return this.selectedTab.index;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    TabBar.prototype.ngAfterContentInit = function () {
        // initial selection
        if (!this.selectedTab) {
            var selectableTabs = this.tabs.filter(function (tab) { return !tab.isDisabled; }), tab = selectableTabs[0];
            if (tab) {
                this.select(tab.index);
            }
        }
    };
    TabBar.prototype.ngAfterViewInit = function () {
        var self = this;
        this.tabs.forEach(function (tab) {
            var tabListHeight = self.tabListHeight;
            tab.height = self._height - tabListHeight;
            if (self.alignment == "top") {
                tab.marginTop = tabListHeight;
            }
            else if (self.alignment == "bottom") {
                tab.marginTop = 0;
            }
        });
    };
    TabBar.prototype.add = function (tab) {
        var _this = this;
        this.tabs.push(tab);
        this.tabs.forEach(function (tab) { tab.columnCount = _this._columns; });
    };
    TabBar.prototype.remove = function (index) {
        var tab;
        if (!this._validateTabIndex(index)) {
            return;
        }
        tab = this.tabs[index];
        if (tab.isSelected) {
            tab.isSelected = false;
        }
        this.tabs.splice(index, 1);
    };
    TabBar.prototype.select = function (index) {
        var tab, self = this;
        if (!this._validateTabIndex(index)) {
            return;
        }
        tab = this.tabs[index];
        if (tab.isDisabled) {
            return;
        }
        this.tabs.forEach(function (tab) {
            if (tab.index != index) {
                self.deselect(tab.index);
            }
        });
        tab.isSelected = true;
        this.selectTab.emit({ index: index, tab: tab });
    };
    TabBar.prototype.deselect = function (index) {
        var tab;
        if (!this._validateTabIndex(index)) {
            return;
        }
        tab = this.tabs[index];
        if (!tab.isDisabled && tab.isSelected) {
            tab.isSelected = false;
        }
    };
    TabBar.prototype._selectTabMore = function () {
        alert("Tab More is clicked");
    };
    TabBar.prototype._validateTabIndex = function (index) {
        return index <= this.tabs.length - 1 && index >= 0;
    };
    __decorate([
        core_1.ViewChild('unorderedList'), 
        __metadata('design:type', core_1.ElementRef)
    ], TabBar.prototype, "_tabList", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], TabBar.prototype, "alignment", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], TabBar.prototype, "selectTab", void 0);
    TabBar = __decorate([
        core_1.Component({
            selector: 'ig-tab-bar',
            moduleId: module.id,
            template: "\n      <div class=\"{{_itemStyle}}\">\n      \t<ng-content></ng-content>\n      \t<ul #unorderedList class=\"{{_itemStyle}}__menu {{_itemStyle}}__menu--{{alignment}}\">\n      \t\t<li *ngFor=\"let tab of _visibleTabs\" class=\"{{_itemStyle}}__menu-item\" [class.ig-tab-bar-inner__menu-item--selected]=\"tab.isSelected\" [class.ig-tab-bar-inner__menu-item--disabled]=\"tab.isDisabled\" (click)=\"tab.select()\" >\n      \t\t\t<div ngClass=\"tab-icon\">\n      \t\t\t\t<i class=\"material-icons\">{{tab.icon}}</i>\n      \t\t\t\t<span [class.ig-badge--hidden]=\"tab._changesCount == 0\" class=\"ig-badge\">{{tab._changesCount}}</span>\n      \t\t\t</div>\n      \t\t\t<div ngClass=\"tab-label\">{{tab.label}}</div>\n      \t\t\t<div ngClass=\"tab-color tab-color--{{tab.color}}\"></div>\n      \t\t</li>\n      \t\t<li class=\"{{_itemStyle}}__menu-item\" *ngIf=\"tabs.length > 5\" (click)=\"_selectTabMore()\">\n      \t\t\t<div ngClass=\"tab-icon\">\n      \t\t\t\t<i class=\"material-icons\">more_horiz</i>\n      \t\t\t\t <!--<span [class.hidden]=\"tab._changesCount == 0\" class=\"badge\">{{tab._changesCount}}</span> -->\n      \t\t\t</div>\n      \t\t\t<div ngClass=\"tab-label\">More</div>\n      \t\t</li>\n      \t</ul>\n      </div>\n    "
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], TabBar);
    return TabBar;
}());
exports.TabBar = TabBar;
var Tab = (function () {
    function Tab(_tabBar, _element) {
        this._tabBar = _tabBar;
        this._element = _element;
        this._itemStyle = "ig-tab-inner";
        this._changesCount = 0; // changes and updates accordingly applied to the tab.
        this.isSelected = false;
        // Indirectly defines the width of the tab.
        this.columnCount = 0;
        this._tabBar.add(this);
    }
    Object.defineProperty(Tab.prototype, "index", {
        get: function () {
            return this._tabBar.tabs.indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "isDisabled", {
        get: function () {
            return this.disabled !== undefined;
        },
        set: function (value) {
            this.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "height", {
        get: function () {
            return this.wrapper.nativeElement.style.height;
        },
        set: function (value) {
            this.wrapper.nativeElement.style.height = value + "px";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "marginTop", {
        get: function () {
            return this.wrapper.nativeElement.style.marginTop;
        },
        set: function (value) {
            this.wrapper.nativeElement.style.marginTop = value + "px";
        },
        enumerable: true,
        configurable: true
    });
    Tab.prototype.select = function () {
        if (this.href) {
        }
        this._tabBar.select(this.index);
    };
    Tab.prototype.deselect = function () {
        this._tabBar.deselect(this.index);
    };
    __decorate([
        core_1.ViewChild('wrapper'), 
        __metadata('design:type', core_1.ElementRef)
    ], Tab.prototype, "wrapper", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Tab.prototype, "label", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Tab.prototype, "icon", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Tab.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Tab.prototype, "href", void 0);
    __decorate([
        // TODO - need to be disccussed
        core_1.Input(), 
        __metadata('design:type', String)
    ], Tab.prototype, "color", void 0);
    Tab = __decorate([
        core_1.Component({
            selector: 'ig-tab',
            moduleId: module.id,
            template: "\n      <div #wrapper class=\"{{_itemStyle}}\" [class.selected]=\"isSelected\" >\n      \t<ng-content></ng-content>\n      </div>\n    ",
            host: {
                '[class]': '"col-" + columnCount'
            }
        }), 
        __metadata('design:paramtypes', [TabBar, core_1.ElementRef])
    ], Tab);
    return Tab;
}());
exports.Tab = Tab;
var TabBarModule = (function () {
    function TabBarModule() {
    }
    TabBarModule = __decorate([
        core_1.NgModule({
            declarations: [TabBar, Tab],
            imports: [common_1.CommonModule],
            exports: [TabBar, Tab]
        }), 
        __metadata('design:paramtypes', [])
    ], TabBarModule);
    return TabBarModule;
}());
exports.TabBarModule = TabBarModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
