"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
// import {AnimationBuilder} from 'angular2/src/animate/animation_builder'; TODO
var base_1 = require('../core/base');
var touch_1 = require("../core/touch");
var navigation_1 = require('../core/navigation');
/**
 * Navigation Drawer component supports collapsible side navigation container.
 * Usage:
 * ```
 * <ig-nav-drawer id="ID" (event output bindings) [input bindings]>
 *  <div class="ig-drawer-content">
 *   <!-- expanded template -->
 *  </div>
 * </ig-nav-drawer>
 * ```
 * Can also include an optional `<div class="ig-drawer-mini-content">`.
 * ID required to register with NavigationService allow directives to target the control.
 */
var NavigationDrawer = (function (_super) {
    __extends(NavigationDrawer, _super);
    function NavigationDrawer(elementRef, _state, 
        // private animate: AnimationBuilder, TODO
        renderer, _touchManager) {
        var _this = this;
        _super.call(this, renderer);
        this.elementRef = elementRef;
        this._state = _state;
        this.renderer = renderer;
        this._touchManager = _touchManager;
        this._hasMimiTempl = false;
        this._swipeAttached = false;
        this._widthCache = { width: null, miniWidth: null };
        this.css = {
            "drawer": "ig-nav-drawer",
            "overlay": "ig-nav-drawer-overlay",
            "mini": "mini",
            "miniProjection": ".ig-drawer-mini-content",
            "styleDummy": "style-dummy"
        };
        /** Pan animation properties */
        this._panning = false;
        this._maxEdgeZone = 50;
        /**
         * Position of the Navigation Drawer. Can be "left"(default) or "right". Only has effect when not pinned.
         */
        this.position = "left";
        /**
         * Enables the use of touch gestures to manipulate the drawer - such as swipe/pan from edge to open, swipe toggle and pan drag.
         */
        this.enableGestures = true;
        /** State of the drawer. */
        this.isOpen = false;
        /** Pinned state of the drawer. Currently only support  */
        this.pin = false;
        /** Minimum device width required for automatic pin to be toggled. Deafult is 1024, can be set to falsy value to ignore. */
        this.pinThreshold = 1024;
        /** Event fired as the Navigation Drawer is about to open. */
        this.opening = new core_1.EventEmitter();
        /** Event fired when the Navigation Drawer has opened. */
        this.opened = new core_1.EventEmitter();
        /** Event fired as the Navigation Drawer is about to close. */
        this.closing = new core_1.EventEmitter();
        /** Event fired when the Navigation Drawer has closed. */
        this.closed = new core_1.EventEmitter();
        this.swipe = function (evt) {
            // TODO: Could also force input type: http://stackoverflow.com/a/27108052
            if (!_this.enableGestures || evt.pointerType !== "touch") {
                return;
            }
            // HammerJS swipe is horizontal-only by default, don't check deltaY
            var deltaX, startPosition;
            if (_this.position === "right") {
                // when on the right use inverse of deltaX
                deltaX = -evt.deltaX;
                startPosition = _this.getWindowWidth() - (evt.center.x + evt.distance);
            }
            else {
                deltaX = evt.deltaX;
                startPosition = evt.center.x - evt.distance;
            }
            //only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:
            if ((_this.isOpen && deltaX < 0) ||
                // positive deltaX from the edge:
                (deltaX > 0 && startPosition < _this.maxEdgeZone)) {
                _this.toggle(true);
            }
        };
        this.panstart = function (evt) {
            if (!_this.enableGestures || _this.pin || evt.pointerType !== "touch") {
                return;
            }
            var startPosition = _this.position === "right" ? _this.getWindowWidth() - (evt.center.x + evt.distance) : evt.center.x - evt.distance;
            // cache width during animation, flag to allow further handling
            if (_this.isOpen || (startPosition < _this.maxEdgeZone)) {
                _this._panning = true;
                _this._panStartWidth = _this.getExpectedWidth(!_this.isOpen);
                _this._panLimit = _this.getExpectedWidth(_this.isOpen);
                _this.renderer.setElementClass(_this.overlay, "panning", true);
                _this.renderer.setElementClass(_this.drawer, "panning", true);
            }
        };
        this.pan = function (evt) {
            // TODO: input.deltaX = prevDelta.x + (center.x - offset.x); get actual delta (not total session one) from event?
            // pan WILL also fire after a full swipe, only resize on flag
            if (!_this._panning) {
                return;
            }
            var right = _this.position === "right", 
            // when on the right use inverse of deltaX
            deltaX = right ? -evt.deltaX : evt.deltaX, visibleWidth, newX, percent;
            visibleWidth = _this._panStartWidth + deltaX;
            if (_this.isOpen && deltaX < 0) {
                // when visibleWidth hits limit - stop animating
                if (visibleWidth <= _this._panLimit)
                    return;
                if (_this.hasAnimateWidth) {
                    percent = (visibleWidth - _this._panLimit) / (_this._panStartWidth - _this._panLimit);
                    newX = visibleWidth;
                }
                else {
                    percent = visibleWidth / _this._panStartWidth;
                    newX = evt.deltaX;
                }
                _this.setXSize(newX, percent.toPrecision(2));
            }
            else if (!_this.isOpen && deltaX > 0) {
                // when visibleWidth hits limit - stop animating
                if (visibleWidth >= _this._panLimit)
                    return;
                if (_this.hasAnimateWidth) {
                    percent = (visibleWidth - _this._panStartWidth) / (_this._panLimit - _this._panStartWidth);
                    newX = visibleWidth;
                }
                else {
                    percent = visibleWidth / _this._panLimit;
                    newX = (_this._panLimit - visibleWidth) * (right ? 1 : -1);
                }
                _this.setXSize(newX, percent.toPrecision(2));
            }
        };
        this.panEnd = function (evt) {
            if (_this._panning) {
                var deltaX = _this.position === "right" ? -evt.deltaX : evt.deltaX, visibleWidth = _this._panStartWidth + deltaX;
                _this.resetPan();
                // check if pan brought the drawer to 50%
                if (_this.isOpen && visibleWidth <= _this._panStartWidth / 2) {
                    _this.close(true);
                }
                else if (!_this.isOpen && visibleWidth >= _this._panLimit / 2) {
                    _this.open(true);
                }
                _this._panStartWidth = null;
            }
        };
        this.toggleOpenedEvent = function (evt) {
            _this.elementRef.nativeElement.removeEventListener("transitionend", _this.toggleOpenedEvent, false);
            _this._resolveOpen("opened");
            delete _this._resolveClose;
        };
        this.toggleClosedEvent = function (evt) {
            _this.elementRef.nativeElement.removeEventListener("transitionend", _this.toggleClosedEvent, false);
            _this._resolveClose("closed");
            delete _this._resolveClose;
        };
    }
    Object.defineProperty(NavigationDrawer.prototype, "drawer", {
        get: function () {
            if (!this._drawer) {
                this._drawer = this.getChild("." + this.css["drawer"]);
            }
            return this._drawer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDrawer.prototype, "overlay", {
        get: function () {
            if (!this._overlay) {
                this._overlay = this.getChild("." + this.css["overlay"]);
            }
            return this._overlay;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDrawer.prototype, "styleDummy", {
        get: function () {
            if (!this._styleDummy) {
                this._styleDummy = this.getChild("." + this.css["styleDummy"]);
            }
            return this._styleDummy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDrawer.prototype, "hasAnimateWidth", {
        /**
         * Property to decide whether to change width or translate the drawer from pan gesture.
         */
        get: function () {
            return this.pin || this._hasMimiTempl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDrawer.prototype, "maxEdgeZone", {
        /**
         * Used for touch gestures (swipe and pan). Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.
         * @protected set method
         */
        get: function () {
            return this._maxEdgeZone;
        },
        enumerable: true,
        configurable: true
    });
    NavigationDrawer.prototype.set_maxEdgeZone = function (value) {
        this._maxEdgeZone = value;
    };
    Object.defineProperty(NavigationDrawer.prototype, "expectedWidth", {
        /**
         * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.
         */
        get: function () {
            return this.getExpectedWidth(false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDrawer.prototype, "expectedMiniWidth", {
        /**
         * Get the Drawer mini width for specific state. Will attempt to evaluate requested state and cache.
         */
        get: function () {
            return this.getExpectedWidth(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDrawer.prototype, "touchManager", {
        get: function () {
            return this._touchManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDrawer.prototype, "state", {
        /**
         * Exposes optional navigation service
         */
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    NavigationDrawer.prototype.ngOnInit = function () {
        // DOM and @Input()-s initialized
        if (this._state) {
            this._state.add(this.id, this);
        }
    };
    NavigationDrawer.prototype.ngAfterContentInit = function () {
        // wait for template and ng-content to be ready
        this._hasMimiTempl = this.getChild(this.css["miniProjection"]) !== null;
        this.updateEdgeZone();
        if (this.pinThreshold && this.getWindowWidth() > this.pinThreshold) {
            this.pin = true;
        }
        // need to set height without absolute positioning
        this.ensureDrawerHeight();
        this.ensureEvents();
        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview
        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904
    };
    NavigationDrawer.prototype.ngOnDestroy = function () {
        this._touchManager.destroy();
        if (this._state) {
            this._state.remove(this.id);
        }
    };
    NavigationDrawer.prototype.ngOnChanges = function (changes) {
        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted
        if (changes['enableGestures'] && changes['enableGestures'].currentValue !== undefined) {
            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === "true");
            this.ensureEvents();
        }
        if (changes['pin'] && changes['pin'].currentValue !== undefined) {
            this.pin = !!(this.pin && this.pin.toString() === "true");
            this.ensureDrawerHeight();
            if (this.pin) {
                this._touchManager.destroy();
            }
            else {
                this.ensureEvents();
            }
        }
        if (changes['width'] && this.isOpen) {
            this.setDrawerWidth(changes['width'].currentValue);
        }
        if (changes['miniWidth']) {
            if (!this.isOpen) {
                this.setDrawerWidth(changes['miniWidth'].currentValue);
            }
            this.updateEdgeZone();
        }
    };
    NavigationDrawer.prototype.getWindowWidth = function () {
        return (window.innerWidth > 0) ? window.innerWidth : screen.width;
    };
    /**
     * Sets the drawer width.
     * @param width Width to set, must be valid CSS size string.
     */
    NavigationDrawer.prototype.setDrawerWidth = function (width) {
        var _this = this;
        window.requestAnimationFrame(function () {
            if (_this.drawer) {
                _this.renderer.setElementStyle(_this.drawer, "width", width);
            }
        });
    };
    NavigationDrawer.prototype.ensureDrawerHeight = function () {
        if (this.pin) {
            // TODO: nested in content?
            // setElementStyle warning https://github.com/angular/angular/issues/6563
            this.renderer.setElementStyle(this.drawer, "height", window.innerHeight + "px");
        }
    };
    /**
     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.
     * @param mini Request mini width instead
     */
    NavigationDrawer.prototype.getExpectedWidth = function (mini) {
        if (mini) {
            if (!this._hasMimiTempl) {
                return 0;
            }
            if (this.miniWidth) {
                return parseFloat(this.miniWidth);
            }
            else {
                // if (!this.isOpen) { // This WON'T work due to transition timings...
                //     return this.elementRef.nativeElement.children[1].offsetWidth;
                // } else {
                if (this._widthCache["miniWidth"] === null) {
                    // force class for width calc. TODO?
                    this.renderer.setElementClass(this.styleDummy, this.css["drawer"], true);
                    this.renderer.setElementClass(this.styleDummy, this.css["mini"], true);
                    this._widthCache["miniWidth"] = this.styleDummy.offsetWidth;
                    this.renderer.setElementClass(this.styleDummy, this.css["drawer"], false);
                    this.renderer.setElementClass(this.styleDummy, this.css["mini"], false);
                }
                return this._widthCache["miniWidth"];
            }
        }
        else {
            if (this.width) {
                return parseFloat(this.width);
            }
            else {
                if (this._widthCache["width"] === null) {
                    // force class for width calc. TODO?
                    this.renderer.setElementClass(this.styleDummy, this.css["drawer"], true);
                    this._widthCache["width"] = this.styleDummy.offsetWidth;
                    this.renderer.setElementClass(this.styleDummy, this.css["drawer"], false);
                }
                return this._widthCache["width"];
            }
        }
    };
    /**
     * Get current Drawer width.
     */
    NavigationDrawer.prototype.getDrawerWidth = function () {
        return this.drawer.offsetWidth;
    };
    NavigationDrawer.prototype.ensureEvents = function () {
        // set listeners for swipe/pan only if needed, but just once
        if (this.enableGestures && !this.pin && !this._swipeAttached) {
            // Built-in manager handler(L20887) causes endless loop and max stack exception. https://github.com/angular/angular/issues/6993
            // Use ours for now (until beta.10):
            //this.renderer.listen(document, "swipe", this.swipe);
            this._touchManager.addGlobalEventListener("document", "swipe", this.swipe);
            this._swipeAttached = true;
            //this.renderer.listen(document, "panstart", this.panstart);
            //this.renderer.listen(document, "pan", this.pan);
            this._touchManager.addGlobalEventListener("document", "panstart", this.panstart);
            this._touchManager.addGlobalEventListener("document", "panmove", this.pan);
            this._touchManager.addGlobalEventListener("document", "panend", this.panEnd);
        }
    };
    NavigationDrawer.prototype.updateEdgeZone = function () {
        var maxValue;
        if (this._hasMimiTempl) {
            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);
            this.set_maxEdgeZone(maxValue);
        }
    };
    NavigationDrawer.prototype.resetPan = function () {
        this._panning = false;
        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */
        this.renderer.setElementClass(this.overlay, "panning", false);
        this.renderer.setElementClass(this.drawer, "panning", false);
        this.setXSize(0, "");
    };
    /**
     * Sets the absolute position or width in case the drawer doesn't change position.
     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.
     * @param opacity optional value to apply to the overlay
     */
    NavigationDrawer.prototype.setXSize = function (x, opacity) {
        var _this = this;
        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)
        window.requestAnimationFrame(function () {
            if (_this.hasAnimateWidth) {
                _this.renderer.setElementStyle(_this.drawer, "width", x ? Math.abs(x) + "px" : "");
            }
            else {
                _this.renderer.setElementStyle(_this.drawer, "transform", x ? "translate3d(" + x + "px,0,0)" : "");
                _this.renderer.setElementStyle(_this.drawer, "-webkit-transform", x ? "translate3d(" + x + "px,0,0)" : "");
            }
            if (opacity !== undefined) {
                _this.renderer.setElementStyle(_this.overlay, "opacity", opacity);
            }
        });
    };
    /**
     * Toggle the open state of the Navigation Drawer.
     * @param fireEvents Optional flag determining whether events should be fired or not.
     * @return Promise that is resolved once the operation completes.
     */
    NavigationDrawer.prototype.toggle = function (fireEvents) {
        if (this.isOpen) {
            return this.close(fireEvents);
        }
        else {
            return this.open(fireEvents);
        }
    };
    /**
     * Open the Navigation Drawer. Has no effect if already opened.
     * @param fireEvents Optional flag determining whether events should be fired or not.
     * @return Promise that is resolved once the operation completes.
     */
    NavigationDrawer.prototype.open = function (fireEvents) {
        var _this = this;
        if (this._panning) {
            this.resetPan();
        }
        if (this.isOpen) {
            return Promise.resolve();
        }
        if (fireEvents) {
            this.opening.emit("opening");
        }
        this.isOpen = true;
        // TODO: Switch to animate API when available
        // var animationCss = this.animate.css();
        //     animationCss
        //         .setStyles({'width':'50px'}, {'width':'400px'})
        //         .start(this.elementRef.nativeElement)
        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));
        this.elementRef.nativeElement.addEventListener("transitionend", this.toggleOpenedEvent, false);
        this.setDrawerWidth(this.width);
        return new Promise(function (resolve) {
            _this._resolveOpen = function (value) {
                resolve(value);
                if (fireEvents) {
                    _this.opened.emit("opened");
                }
            };
        });
    };
    /**
     * Close the Navigation Drawer. Has no effect if already closed.
     * @param fireEvents Optional flag determining whether events should be fired or not.
     * @return Promise that is resolved once the operation completes.
     */
    NavigationDrawer.prototype.close = function (fireEvents) {
        var _this = this;
        if (this._panning) {
            this.resetPan();
        }
        if (!this.isOpen) {
            return Promise.resolve();
        }
        if (fireEvents) {
            this.closing.emit("closing");
        }
        this.isOpen = false;
        this.setDrawerWidth(this._hasMimiTempl ? this.miniWidth : "");
        this.elementRef.nativeElement.addEventListener("transitionend", this.toggleClosedEvent, false);
        return new Promise(function (resolve) {
            _this._resolveClose = function (value) {
                resolve(value);
                if (fireEvents) {
                    _this.closed.emit("closed");
                }
            };
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], NavigationDrawer.prototype, "id", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], NavigationDrawer.prototype, "position", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], NavigationDrawer.prototype, "enableGestures", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], NavigationDrawer.prototype, "isOpen", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], NavigationDrawer.prototype, "pin", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], NavigationDrawer.prototype, "pinThreshold", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], NavigationDrawer.prototype, "width", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], NavigationDrawer.prototype, "miniWidth", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], NavigationDrawer.prototype, "opening", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], NavigationDrawer.prototype, "opened", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], NavigationDrawer.prototype, "closing", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], NavigationDrawer.prototype, "closed", void 0);
    NavigationDrawer = __decorate([
        core_1.Component({
            selector: 'ig-nav-drawer',
            /* Per https://github.com/angular/angular/issues/2383 BUT https://github.com/angular/angular/issues/6053, can't use relative URLs still with SystemJS
                TODO: try https://github.com/angular/angular/issues/2991 ??
            */
            moduleId: module.id,
            template: "\n      <div class=\"ig-nav-drawer-overlay\" [class.pinned]=\"pin\" [class.hidden]=\"!isOpen\" (click)=\"close(true)\"></div>\n      <aside class=\"ig-nav-drawer\" role=\"navigation\" \n          [class.collapsed]=\"!_hasMimiTempl && !isOpen\" [class.mini]=\"_hasMimiTempl && !isOpen\" [class.pinned]=\"pin\" [class.right]=\"position == 'right'\">\n    \n          <div class=\"\" [hidden]=\"!isOpen && _hasMimiTempl\">\n              <ng-content select=\".ig-drawer-content\"></ng-content>\n          </div>                \n          <div class=\"\" [hidden]=\"isOpen\">\n              <ng-content select=\".ig-drawer-mini-content\"></ng-content>\n          </div>\n      </aside>\n      <div class=\"style-dummy\"></div>\n    ",
            providers: [touch_1.HammerGesturesManager]
        }),
        __param(0, core_1.Inject(core_1.ElementRef)),
        __param(1, core_1.Optional()), 
        __metadata('design:paramtypes', [core_1.ElementRef, navigation_1.NavigationService, core_1.Renderer, touch_1.HammerGesturesManager])
    ], NavigationDrawer);
    return NavigationDrawer;
}(base_1.BaseComponent));
exports.NavigationDrawer = NavigationDrawer;
var NavigationDrawerModule = (function () {
    function NavigationDrawerModule() {
    }
    NavigationDrawerModule = __decorate([
        core_1.NgModule({
            declarations: [NavigationDrawer],
            exports: [NavigationDrawer]
        }), 
        __metadata('design:paramtypes', [])
    ], NavigationDrawerModule);
    return NavigationDrawerModule;
}());
exports.NavigationDrawerModule = NavigationDrawerModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
