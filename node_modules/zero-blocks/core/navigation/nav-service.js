"use strict";
/**
 * Common service to be injected between components where those implementing common
 * ToggleView interface can register and toggle directives can call their methods.
 * TODO: Track currently active? Events?
 */
var NavigationService = (function () {
    function NavigationService() {
        this.navs = {};
    }
    NavigationService.prototype.add = function (id, navItem) {
        this.navs[id] = navItem;
    };
    NavigationService.prototype.remove = function (id) {
        delete this.navs[id];
    };
    NavigationService.prototype.get = function (id) {
        if (id) {
            return this.navs[id];
        }
    };
    NavigationService.prototype.toggle = function (id, fireEvents) {
        if (this.navs[id]) {
            return this.navs[id].toggle(fireEvents);
        }
        else {
            return Promise.reject("No ToggleView component found for id:" + id);
        }
    };
    NavigationService.prototype.open = function (id, fireEvents) {
        if (this.navs[id]) {
            return this.navs[id].open(fireEvents);
        }
        else {
            return Promise.reject("No ToggleView component found for id:" + id);
        }
    };
    NavigationService.prototype.close = function (id, fireEvents) {
        if (this.navs[id]) {
            return this.navs[id].close(fireEvents);
        }
        else {
            return Promise.reject("No ToggleView component found for id:" + id);
        }
    };
    return NavigationService;
}());
exports.NavigationService = NavigationService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbmF2aWdhdGlvbi9uYXYtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUE7Ozs7R0FJRztBQUNIO0lBR0k7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU0sK0JBQUcsR0FBVixVQUFXLEVBQVUsRUFBRSxPQUFtQjtRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBRU0sa0NBQU0sR0FBYixVQUFjLEVBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFTSwrQkFBRyxHQUFWLFVBQVcsRUFBVTtRQUNqQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsQ0FBQztJQUNMLENBQUM7SUFFTSxrQ0FBTSxHQUFiLFVBQWMsRUFBVSxFQUFFLFVBQW9CO1FBQzFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyx1Q0FBdUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4RSxDQUFDO0lBQ0wsQ0FBQztJQUNNLGdDQUFJLEdBQVgsVUFBWSxFQUFVLEVBQUUsVUFBb0I7UUFDeEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHVDQUF1QyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLENBQUM7SUFDTCxDQUFDO0lBQ00saUNBQUssR0FBWixVQUFhLEVBQVUsRUFBRSxVQUFvQjtRQUN6QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsdUNBQXVDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEUsQ0FBQztJQUNMLENBQUM7SUFDTCx3QkFBQztBQUFELENBMUNBLEFBMENDLElBQUE7QUExQ1kseUJBQWlCLG9CQTBDN0IsQ0FBQSIsImZpbGUiOiJjb3JlL25hdmlnYXRpb24vbmF2LXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RvZ2dsZVZpZXd9IGZyb20gJy4vdG9nZ2xlJztcblxuLyoqXG4gKiBDb21tb24gc2VydmljZSB0byBiZSBpbmplY3RlZCBiZXR3ZWVuIGNvbXBvbmVudHMgd2hlcmUgdGhvc2UgaW1wbGVtZW50aW5nIGNvbW1vbiBcbiAqIFRvZ2dsZVZpZXcgaW50ZXJmYWNlIGNhbiByZWdpc3RlciBhbmQgdG9nZ2xlIGRpcmVjdGl2ZXMgY2FuIGNhbGwgdGhlaXIgbWV0aG9kcy5cbiAqIFRPRE86IFRyYWNrIGN1cnJlbnRseSBhY3RpdmU/IEV2ZW50cz9cbiAqL1xuZXhwb3J0IGNsYXNzIE5hdmlnYXRpb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIG5hdnM6IHsgW2lkOiBzdHJpbmddIDogVG9nZ2xlVmlldzsgfTsgICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm5hdnMgPSB7fTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGFkZChpZDogc3RyaW5nLCBuYXZJdGVtOiBUb2dnbGVWaWV3KSB7XG4gICAgICAgIHRoaXMubmF2c1tpZF0gPSBuYXZJdGVtO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgcmVtb3ZlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubmF2c1tpZF07XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQoaWQ6IHN0cmluZyk6IFRvZ2dsZVZpZXcge1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdnNbaWRdO1xuICAgICAgICB9XG4gICAgfVxuICAgICAgIFxuICAgIHB1YmxpYyB0b2dnbGUoaWQ6IHN0cmluZywgZmlyZUV2ZW50cz86IGJvb2xlYW4pIDogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKHRoaXMubmF2c1tpZF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdnNbaWRdLnRvZ2dsZShmaXJlRXZlbnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIk5vIFRvZ2dsZVZpZXcgY29tcG9uZW50IGZvdW5kIGZvciBpZDpcIiArIGlkKTtcbiAgICAgICAgfVxuICAgIH0gICAgICAgIFxuICAgIHB1YmxpYyBvcGVuKGlkOiBzdHJpbmcsIGZpcmVFdmVudHM/OiBib29sZWFuKSA6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGlmICh0aGlzLm5hdnNbaWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYXZzW2lkXS5vcGVuKGZpcmVFdmVudHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiTm8gVG9nZ2xlVmlldyBjb21wb25lbnQgZm91bmQgZm9yIGlkOlwiICsgaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBjbG9zZShpZDogc3RyaW5nLCBmaXJlRXZlbnRzPzogYm9vbGVhbikgOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBpZiAodGhpcy5uYXZzW2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF2c1tpZF0uY2xvc2UoZmlyZUV2ZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJObyBUb2dnbGVWaWV3IGNvbXBvbmVudCBmb3VuZCBmb3IgaWQ6XCIgKyBpZCk7XG4gICAgICAgIH1cbiAgICB9XG59Il19
