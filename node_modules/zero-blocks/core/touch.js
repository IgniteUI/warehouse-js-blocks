/// <reference path="../../../typings/globals/hammerjs/index.d.ts" />
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var EVENT_SUFFIX = "precise";
/**
 * Touch gestures manager based on Hammer.js
 * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.
 */
var HammerGesturesManager = (function () {
    function HammerGesturesManager(_zone) {
        this._zone = _zone;
        this._hammerManagers = [];
        /**
         * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.
         */
        this.hammerOptions = [
            {
                name: "pan",
                options: {
                    threshold: 0
                }
            }, {
                name: "pinch",
                options: {
                    enable: true
                }
            }, {
                name: "rotate",
                options: {
                    enable: true
                }
            }];
    }
    HammerGesturesManager.prototype.supports = function (eventName) {
        return eventName.toLowerCase().endsWith("." + EVENT_SUFFIX);
    };
    /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     */
    HammerGesturesManager.prototype.addEventListener = function (element, eventName, eventHandler, options) {
        if (options === void 0) { options = null; }
        var self = this;
        // Creating the manager bind events, must be done outside of angular
        return this._zone.runOutsideAngular(function () {
            // new Hammer is a shortcut for Manager with defaults
            var mc = new Hammer(element);
            for (var i = 0; i < self.hammerOptions.length; i++) {
                mc.get(self.hammerOptions[i].name).set(self.hammerOptions[i].options);
            }
            var handler = function (eventObj) { self._zone.run(function () { eventHandler(eventObj); }); };
            mc.on(eventName, handler);
            return function () { mc.off(eventName, handler); };
        });
    };
    /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     *
     * @param target Can be one of either window, body or document(fallback default).
     */
    HammerGesturesManager.prototype.addGlobalEventListener = function (target, eventName, eventHandler) {
        var self = this, element = this.getGlobalEventTarget(target);
        // Creating the manager bind events, must be done outside of angular
        return this._zone.runOutsideAngular(function () {
            // new Hammer is a shortcut for Manager with defaults
            var mc = new Hammer(element);
            self.addManagerForElement(element, mc);
            for (var i = 0; i < self.hammerOptions.length; i++) {
                mc.get(self.hammerOptions[i].name).set(self.hammerOptions[i].options);
            }
            var handler = function (eventObj) {
                self._zone.run(function () {
                    eventHandler(eventObj);
                });
            };
            mc.on(eventName, handler);
            return function () { mc.off(eventName, handler); };
        });
    };
    /** temp replacement for DOM.getGlobalEventTarget(target) because DI won't play nice for now */
    HammerGesturesManager.prototype.getGlobalEventTarget = function (target) {
        switch (target) {
            case "window":
                return window;
            case "body":
                return document.body;
            default:
                return document;
        }
    };
    /**
     * Set HammerManager options.
     *
     * @param element The DOM element used to create the manager on.
     *
     * ### Example
     *
     * ```ts
     * manager.setManagerOption(myElem, "pan", { pointers: 1 });
     * ```
     */
    HammerGesturesManager.prototype.setManagerOption = function (element, event, options) {
        var manager = this.getManagerForElement(element);
        manager.get(event).set(options);
    };
    /**
     * Add an element and manager map to the internal collection.
     *
     * @param element The DOM element used to create the manager on.
     */
    HammerGesturesManager.prototype.addManagerForElement = function (element, manager) {
        this._hammerManagers.push({ element: element, manager: manager });
    };
    /**
     * Get HammerManager for the element or null
     *
     * @param element The DOM element used to create the manager on.
     */
    HammerGesturesManager.prototype.getManagerForElement = function (element) {
        var result = this._hammerManagers.filter(function (value, index, array) {
            return value.element === element;
        });
        return result.length ? result[0].manager : null;
    };
    /**
     * Destroys the HammerManager for the element, removing event listeners in the process.
     *
     * @param element The DOM element used to create the manager on.
     */
    HammerGesturesManager.prototype.removeManagerForElement = function (element) {
        var index = null;
        for (var i = 0; i < this._hammerManagers.length; i++) {
            if (element === this._hammerManagers[i].element) {
                index = i;
                break;
            }
        }
        if (index !== null) {
            var item = this._hammerManagers.splice(index, 1)[0];
            // destroy also
            item.manager.destroy();
        }
    };
    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */
    HammerGesturesManager.prototype.destroy = function () {
        for (var i = 0; i < this._hammerManagers.length; i++) {
            this._hammerManagers[i].manager.destroy();
        }
        this._hammerManagers = [];
    };
    HammerGesturesManager = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [core_1.NgZone])
    ], HammerGesturesManager);
    return HammerGesturesManager;
}());
exports.HammerGesturesManager = HammerGesturesManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsZUFBZTtZQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDM0IsQ0FBQztJQUNMLENBQUM7SUFFRCwrRkFBK0Y7SUFDL0YsdUNBQU8sR0FBUDtRQUNJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM5QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQS9KTDtRQUFDLGlCQUFVLEVBQUU7OzZCQUFBO0lBZ0tiLDRCQUFDO0FBQUQsQ0EvSkEsQUErSkMsSUFBQTtBQS9KWSw2QkFBcUIsd0JBK0pqQyxDQUFBIiwiZmlsZSI6ImNvcmUvdG91Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9nbG9iYWxzL2hhbW1lcmpzL2luZGV4LmQudHNcIiAvPlxuXG5pbXBvcnQge0luamVjdGFibGUsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IEVWRU5UX1NVRkZJWDogc3RyaW5nID0gXCJwcmVjaXNlXCI7XG5cblxuLyoqXG4gKiBUb3VjaCBnZXN0dXJlcyBtYW5hZ2VyIGJhc2VkIG9uIEhhbW1lci5qc1xuICogVXNlIHdpdGggY2F1dGlvbiwgdGhpcyB3aWxsIHRyYWNrIHJlZmVyZW5jZXMgZm9yIHNpbmdsZSBtYW5hZ2VyIHBlciBlbGVtZW50LiBWZXJ5IFRCRC4gTXVjaCBUT0RPLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSGFtbWVyR2VzdHVyZXNNYW5hZ2VyIHtcbiAgICBwcml2YXRlIF9oYW1tZXJNYW5hZ2VyczogQXJyYXk8eyBlbGVtZW50OiBFdmVudFRhcmdldCwgbWFuYWdlcjogSGFtbWVyTWFuYWdlcjsgfT4gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IG9wdGlvbiBkZWZhdWx0cyBmb3IgZWFjaCByZWNvZ25pemVyLCBzZWUgaHR0cDovL2hhbW1lcmpzLmdpdGh1Yi5pby9hcGkvIGZvciBBUEkgbGlzdGluZy5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaGFtbWVyT3B0aW9uczogQXJyYXk8YW55PiA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJwYW5cIixcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogXCJwaW5jaFwiLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiBcInJvdGF0ZVwiLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3pvbmU6IE5nWm9uZSkge1xuICAgIH1cblxuICAgIHN1cHBvcnRzKGV2ZW50TmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBldmVudE5hbWUudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcIi5cIiArIEVWRU5UX1NVRkZJWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGxpc3RlbmVyIGV4dGVuZGVkIHdpdGggb3B0aW9ucyBmb3IgSGFtbWVyLmpzLiBXaWxsIHVzZSBkZWZhdWx0cyBpZiBub25lIGFyZSBwcm92aWRlZC5cbiAgICAgKiBNb2RlbGluZyBhZnRlciBvdGhlciBldmVudCBwbHVnaW5zIGZvciBlYXN5IGZ1dHVyZSBtb2RpZmljYXRpb25zLlxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudDogSFRNTEVsZW1lbnQsIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudEhhbmRsZXI6IEZ1bmN0aW9uLCBvcHRpb25zOiBPYmplY3QgPSBudWxsKTogRnVuY3Rpb24ge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cblxuICAgICAgICAvLyBDcmVhdGluZyB0aGUgbWFuYWdlciBiaW5kIGV2ZW50cywgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgYW5ndWxhclxuICAgICAgICByZXR1cm4gdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIG5ldyBIYW1tZXIgaXMgYSBzaG9ydGN1dCBmb3IgTWFuYWdlciB3aXRoIGRlZmF1bHRzXG4gICAgICAgICAgICB2YXIgbWMgPSBuZXcgSGFtbWVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmhhbW1lck9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYy5nZXQoc2VsZi5oYW1tZXJPcHRpb25zW2ldLm5hbWUpLnNldChzZWxmLmhhbW1lck9wdGlvbnNbaV0ub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50T2JqKSB7IHNlbGYuX3pvbmUucnVuKGZ1bmN0aW9uKCkgeyBldmVudEhhbmRsZXIoZXZlbnRPYmopOyB9KTsgfTtcbiAgICAgICAgICAgIG1jLm9uKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4geyBtYy5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTsgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGxpc3RlbmVyIGV4dGVuZGVkIHdpdGggb3B0aW9ucyBmb3IgSGFtbWVyLmpzLiBXaWxsIHVzZSBkZWZhdWx0cyBpZiBub25lIGFyZSBwcm92aWRlZC5cbiAgICAgKiBNb2RlbGluZyBhZnRlciBvdGhlciBldmVudCBwbHVnaW5zIGZvciBlYXN5IGZ1dHVyZSBtb2RpZmljYXRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBDYW4gYmUgb25lIG9mIGVpdGhlciB3aW5kb3csIGJvZHkgb3IgZG9jdW1lbnQoZmFsbGJhY2sgZGVmYXVsdCkuXG4gICAgICovXG4gICAgYWRkR2xvYmFsRXZlbnRMaXN0ZW5lcih0YXJnZXQ6IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLmdldEdsb2JhbEV2ZW50VGFyZ2V0KHRhcmdldCk7XG5cbiAgICAgICAgLy8gQ3JlYXRpbmcgdGhlIG1hbmFnZXIgYmluZCBldmVudHMsIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIGFuZ3VsYXJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBuZXcgSGFtbWVyIGlzIGEgc2hvcnRjdXQgZm9yIE1hbmFnZXIgd2l0aCBkZWZhdWx0c1xuXG4gICAgICAgICAgICB2YXIgbWMgOiBIYW1tZXJNYW5hZ2VyID0gbmV3IEhhbW1lcihlbGVtZW50IGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgICAgIHNlbGYuYWRkTWFuYWdlckZvckVsZW1lbnQoZWxlbWVudCBhcyBIVE1MRWxlbWVudCwgbWMpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaGFtbWVyT3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG1jLmdldChzZWxmLmhhbW1lck9wdGlvbnNbaV0ubmFtZSkuc2V0KHNlbGYuaGFtbWVyT3B0aW9uc1tpXS5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24oZXZlbnRPYmopIHtcbiAgICAgICAgICAgICAgICBzZWxmLl96b25lLnJ1bihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyKGV2ZW50T2JqKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtYy5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHsgbWMub2ZmKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKiB0ZW1wIHJlcGxhY2VtZW50IGZvciBET00uZ2V0R2xvYmFsRXZlbnRUYXJnZXQodGFyZ2V0KSBiZWNhdXNlIERJIHdvbid0IHBsYXkgbmljZSBmb3Igbm93ICovXG4gICAgZ2V0R2xvYmFsRXZlbnRUYXJnZXQodGFyZ2V0OiBzdHJpbmcpOiBFdmVudFRhcmdldCB7XG4gICAgICAgIHN3aXRjaCAodGFyZ2V0KSB7XG4gICAgICAgICAgICBjYXNlIFwid2luZG93XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgICAgIGNhc2UgXCJib2R5XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU2V0IEhhbW1lck1hbmFnZXIgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBET00gZWxlbWVudCB1c2VkIHRvIGNyZWF0ZSB0aGUgbWFuYWdlciBvbi5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0c1xuICAgICAqIG1hbmFnZXIuc2V0TWFuYWdlck9wdGlvbihteUVsZW0sIFwicGFuXCIsIHsgcG9pbnRlcnM6IDEgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0TWFuYWdlck9wdGlvbihlbGVtZW50OiBFdmVudFRhcmdldCwgZXZlbnQ6IHN0cmluZywgb3B0aW9uczogYW55KSB7XG4gICAgICAgIHZhciBtYW5hZ2VyID0gdGhpcy5nZXRNYW5hZ2VyRm9yRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgbWFuYWdlci5nZXQoZXZlbnQpLnNldChvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZWxlbWVudCBhbmQgbWFuYWdlciBtYXAgdG8gdGhlIGludGVybmFsIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgRE9NIGVsZW1lbnQgdXNlZCB0byBjcmVhdGUgdGhlIG1hbmFnZXIgb24uXG4gICAgICovXG4gICAgYWRkTWFuYWdlckZvckVsZW1lbnQoZWxlbWVudDogRXZlbnRUYXJnZXQsIG1hbmFnZXI6IEhhbW1lck1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5faGFtbWVyTWFuYWdlcnMucHVzaCh7ZWxlbWVudDogZWxlbWVudCwgbWFuYWdlcjogbWFuYWdlcn0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBIYW1tZXJNYW5hZ2VyIGZvciB0aGUgZWxlbWVudCBvciBudWxsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgRE9NIGVsZW1lbnQgdXNlZCB0byBjcmVhdGUgdGhlIG1hbmFnZXIgb24uXG4gICAgICovXG4gICAgZ2V0TWFuYWdlckZvckVsZW1lbnQoZWxlbWVudDogRXZlbnRUYXJnZXQpIDogSGFtbWVyTWFuYWdlciB7XG4gICAgICAgIHZhciByZXN1bHQgPSAgdGhpcy5faGFtbWVyTWFuYWdlcnMuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuZWxlbWVudCA9PT0gZWxlbWVudDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0WzBdLm1hbmFnZXIgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBIYW1tZXJNYW5hZ2VyIGZvciB0aGUgZWxlbWVudCwgcmVtb3ZpbmcgZXZlbnQgbGlzdGVuZXJzIGluIHRoZSBwcm9jZXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHVzZWQgdG8gY3JlYXRlIHRoZSBtYW5hZ2VyIG9uLlxuICAgICAqL1xuICAgIHJlbW92ZU1hbmFnZXJGb3JFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9oYW1tZXJNYW5hZ2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYoZWxlbWVudCA9PT0gdGhpcy5faGFtbWVyTWFuYWdlcnNbaV0uZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5faGFtbWVyTWFuYWdlcnMuc3BsaWNlKGluZGV4LCAxKVswXTtcbiAgICAgICAgICAgIC8vIGRlc3Ryb3kgYWxzb1xuICAgICAgICAgICAgaXRlbS5tYW5hZ2VyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBEZXN0cm95cyBhbGwgaW50ZXJuYWxseSB0cmFja2VkIEhhbW1lck1hbmFnZXJzLCByZW1vdmluZyBldmVudCBsaXN0ZW5lcnMgaW4gdGhlIHByb2Nlc3MuICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9oYW1tZXJNYW5hZ2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5faGFtbWVyTWFuYWdlcnNbaV0ubWFuYWdlci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFtbWVyTWFuYWdlcnMgPSBbXTtcbiAgICB9XG59XG5cbiJdfQ==
