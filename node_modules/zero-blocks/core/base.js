"use strict";
// TODO: Consider measuring util with Ruler https://github.com/angular/angular/issues/6515
/**
 * Base component class
 */
var BaseComponent = (function () {
    function BaseComponent(renderer) {
        this.renderer = renderer;
    }
    /**
     * Get child element by selector.
     * Replacement for `elementRef.nativeElement.querySelector`
     * @returns Returns the matched DOM element or null
     */
    BaseComponent.prototype.getChild = function (selector) {
        // With DomRenderer selectRootElement will use querySelector against document (!!!) Also will throw if not found
        try {
            if (this.id) {
                selector = "#" + this.id + " " + selector;
            }
            // WARNING: selectRootElement will for whatever reason call clear as well..wiping all contents!
            // -----
            // return this.renderer.selectRootElement(selector);
            // ------
            // INSTEAD temporary per http://stackoverflow.com/a/34433626
            // return DOM.querySelector(DOM.query("document"), selector);
            // could also try http://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders#comment-2543997382
            return document.querySelector(selector);
        }
        catch (error) {
            return null;
        }
    };
    return BaseComponent;
}());
exports.BaseComponent = BaseComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsMEZBQTBGO0FBRTFGOztHQUVHO0FBQ0g7SUFNSSx1QkFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFJLENBQUM7SUFFN0M7Ozs7T0FJRztJQUNPLGdDQUFRLEdBQWxCLFVBQW1CLFFBQWdCO1FBQzlCLGdIQUFnSDtRQUNqSCxJQUFJLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDVixRQUFRLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQztZQUM5QyxDQUFDO1lBQ0QsK0ZBQStGO1lBQy9GLFFBQVE7WUFDUixvREFBb0Q7WUFDcEQsU0FBUztZQUNULDREQUE0RDtZQUM1RCw2REFBNkQ7WUFDN0Qsc0lBQXNJO1lBQ3RJLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBZ0IsQ0FBQztRQUMzRCxDQUFFO1FBQUEsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztJQUNMLENBQUM7SUFDTCxvQkFBQztBQUFELENBL0JBLEFBK0JDLElBQUE7QUEvQlkscUJBQWEsZ0JBK0J6QixDQUFBIiwiZmlsZSI6ImNvcmUvYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVuZGVyZXIsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldERPTSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2RvbS9kb21fYWRhcHRlcic7IC8vdGhpcyBhcHByYXJlbnRseSBvbmx5IHdvcmtzIHByb3BlcnkgaW4gRGFydCBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy82OTA0XG4vLyBUT0RPOiBDb25zaWRlciBtZWFzdXJpbmcgdXRpbCB3aXRoIFJ1bGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzY1MTVcblxuLyoqXG4gKiBCYXNlIGNvbXBvbmVudCBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgQmFzZUNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogU2hvdWxkIGJlIG92ZXJyaWRlbiB3aXRoIEBJbnB1dCgpIGFzIG1ldGFkYXRhIFtmaWVsZF0gY2Fubm90IGJlIGV4dGVuZGVkIHRob3VnaCBpaGVyaXRhbmNlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvNTQxNVxuICAgICAqL1xuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIpIHsgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGNoaWxkIGVsZW1lbnQgYnkgc2VsZWN0b3IuXG4gICAgICogUmVwbGFjZW1lbnQgZm9yIGBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcmBcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBtYXRjaGVkIERPTSBlbGVtZW50IG9yIG51bGxcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0Q2hpbGQoc2VsZWN0b3I6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgIC8vIFdpdGggRG9tUmVuZGVyZXIgc2VsZWN0Um9vdEVsZW1lbnQgd2lsbCB1c2UgcXVlcnlTZWxlY3RvciBhZ2FpbnN0IGRvY3VtZW50ICghISEpIEFsc28gd2lsbCB0aHJvdyBpZiBub3QgZm91bmRcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBcIiNcIiArIHRoaXMuaWQgKyBcIiBcIiArIHNlbGVjdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gV0FSTklORzogc2VsZWN0Um9vdEVsZW1lbnQgd2lsbCBmb3Igd2hhdGV2ZXIgcmVhc29uIGNhbGwgY2xlYXIgYXMgd2VsbC4ud2lwaW5nIGFsbCBjb250ZW50cyFcbiAgICAgICAgICAgIC8vIC0tLS0tXG4gICAgICAgICAgICAvLyByZXR1cm4gdGhpcy5yZW5kZXJlci5zZWxlY3RSb290RWxlbWVudChzZWxlY3Rvcik7XG4gICAgICAgICAgICAvLyAtLS0tLS1cbiAgICAgICAgICAgIC8vIElOU1RFQUQgdGVtcG9yYXJ5IHBlciBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNDQzMzYyNlxuICAgICAgICAgICAgLy8gcmV0dXJuIERPTS5xdWVyeVNlbGVjdG9yKERPTS5xdWVyeShcImRvY3VtZW50XCIpLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICAvLyBjb3VsZCBhbHNvIHRyeSBodHRwOi8vYmxvZy5tZ2VjaGV2LmNvbS8yMDE2LzAxLzIzL2FuZ3VsYXIyLXZpZXdjaGlsZHJlbi1jb250ZW50Y2hpbGRyZW4tZGlmZmVyZW5jZS12aWV3cHJvdmlkZXJzI2NvbW1lbnQtMjU0Mzk5NzM4MlxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59Il19
