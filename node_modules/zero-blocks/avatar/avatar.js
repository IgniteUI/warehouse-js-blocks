"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require("@angular/common");
(function (Size) {
    Size[Size["SMALL"] = 0] = "SMALL";
    Size[Size["MEDIUM"] = 1] = "MEDIUM";
    Size[Size["LARGE"] = 2] = "LARGE";
})(exports.Size || (exports.Size = {}));
var Size = exports.Size;
;
var Avatar = (function () {
    function Avatar(element_ref, renderer) {
        this.element_ref = element_ref;
        this.renderer = renderer;
        this.roundShape = "false";
        this.color = 'white';
        this.fontname = "Titillium Web";
        this._icon = "android";
        this.SizeEnum = Size;
        this._addEventListeners(renderer);
    }
    Object.defineProperty(Avatar.prototype, "size", {
        get: function () {
            return this._size === undefined ? "small" : this._size;
        },
        set: function (value) {
            var sizeType = this.SizeEnum[value.toUpperCase()];
            if (sizeType === undefined) {
                this._size = "small";
            }
            else {
                this._size = value.toLowerCase();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Avatar.prototype, "bgColor", {
        get: function () {
            return this._bgColor;
        },
        set: function (value) {
            var color = value === "" ? "lightgrey" : value;
            this._bgColor = color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Avatar.prototype, "srcImage", {
        get: function () {
            return this.image ? this.image.nativeElement.src : "";
        },
        set: function (value) {
            this.image.nativeElement.src = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Avatar.prototype, "isRounded", {
        get: function () {
            return this.roundShape.toUpperCase() === "TRUE" ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Avatar.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Avatar.prototype.ngAfterViewInit = function () {
        if (this.initials && this.image) {
            var src = this.generateInitials(parseInt(this.image.nativeElement.width));
            this.image.nativeElement.src = src;
        }
    };
    Avatar.prototype.generateInitials = function (size) {
        var canvas = document.createElement('canvas'), fontSize = size / 2, ctx;
        canvas.width = size;
        canvas.height = size;
        ctx = canvas.getContext('2d');
        ctx.fillStyle = this.bgColor;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.textAlign = "center";
        ctx.fillStyle = this.color;
        ctx.font = fontSize + ("px " + this.fontname);
        ctx.fillText(this.initials.toUpperCase(), size / 2, size - (size / 2) + (fontSize / 3));
        return canvas.toDataURL("image/png");
    };
    Avatar.prototype._addEventListeners = function (renderer) {
    };
    __decorate([
        core_1.ViewChild('image'), 
        __metadata('design:type', core_1.ElementRef)
    ], Avatar.prototype, "image", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Avatar.prototype, "initials", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Avatar.prototype, "src", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Avatar.prototype, "roundShape", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Avatar.prototype, "color", void 0);
    __decorate([
        core_1.Input("size"), 
        __metadata('design:type', String)
    ], Avatar.prototype, "size", null);
    __decorate([
        core_1.Input("bgColor"), 
        __metadata('design:type', String)
    ], Avatar.prototype, "bgColor", null);
    __decorate([
        core_1.Input("icon"), 
        __metadata('design:type', String)
    ], Avatar.prototype, "icon", null);
    Avatar = __decorate([
        core_1.Component({
            selector: 'ig-avatar',
            moduleId: module.id,
            template: "\n      <div class=\"ig-avatar\">\n          <img #image *ngIf=\"src || initials\" src=\"{{src}}\" class=\"ig-avatar--image ig-avatar--{{size}}\" [class.ig-avatar--rounded]=\"isRounded\" [style.backgroundColor]=\"bgColor\" />\n          <span *ngIf=\"!src && !initials\" class=\"ig-avatar--{{size}} ig-avatar--icon\" [class.ig-avatar--rounded]=\"isRounded\" [style.backgroundColor]=\"bgColor\" [style.color]=\"color\">\n              <i class=\"material-icons\">{{icon}}</i>\n          </span>\n          <ng-content></ng-content>\n      </div>\n    "
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], Avatar);
    return Avatar;
}());
exports.Avatar = Avatar;
var AvatarModule = (function () {
    function AvatarModule() {
    }
    AvatarModule = __decorate([
        core_1.NgModule({
            declarations: [Avatar],
            imports: [common_1.CommonModule],
            exports: [Avatar]
        }), 
        __metadata('design:paramtypes', [])
    ], AvatarModule);
    return AvatarModule;
}());
exports.AvatarModule = AvatarModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
